{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise Instructions: Panel Data Modeling with Machine Learning Models\n",
    "\n",
    "**Objective:**\n",
    "The goal of this exercise is to practice panel data modeling skills using three machine learning models (Random Forest, Single Decision Tree, and Linear Regression with Elastic Net) that have not been utilized in the project so far. Completing the entire task or a significant portion during the class will earn you an additional 7 points (above what is outlined in the syllabus) towards your final grade.\n",
    "\n",
    "**Tasks:**\n",
    "\n",
    "1. **GitHub Setup:**\n",
    "   - If you haven't done so already, [create](https://github.com/join) a GitHub account.\n",
    "   - [Download](https://desktop.github.com) and [configure](https://docs.github.com/en/desktop/configuring-and-customizing-github-desktop/configuring-basic-settings-in-github-desktop) GitHub Desktop on your laptop. (Here you can find nice intro to the GitHub Dekstop app: [link](https://joshuadull.github.io/GitHub-Desktop/02-getting-started/index.html)). If you prefare git command line usage you can go with this [instruction](https://github.com/michaelwozniak/ml2_tools?tab=readme-ov-file#git).\n",
    "2. **Repository Forking:**\n",
    "   - [Fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) the following repository to your projects: [https://github.com/michaelwozniak/ML-in-Finance-I-case-study-forecasting-tax-avoidance-rates](https://github.com/michaelwozniak/ML-in-Finance-I-case-study-forecasting-tax-avoidance-rates)\n",
    "\n",
    "3. **Repository Cloning:**\n",
    "   - [Clone](https://docs.github.com/en/desktop/adding-and-cloning-repositories/cloning-a-repository-from-github-to-github-desktop) the forked repository to your local computer using GitHub Desktop.\n",
    "\n",
    "4. **Notebook Exploration:**\n",
    "   - Open the file `notebooks/10.exercise.ipynb` to begin the ML tasks.\n",
    "\n",
    "5. **Model Creation:**\n",
    "\n",
    "   In the file `notebooks/10.exercise.ipynb`:\n",
    "   - Create the following models:\n",
    "      1. Random Forest ([RandomForestRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html))\n",
    "      2. Decision Tree ([DecisionTreeRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html))\n",
    "      3. Linear Regression with Elastic Net ([ElasticNet](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html))\n",
    "   \n",
    "   Follow a similar process to the models presented in class (e.g., KNN - `notebooks/07.knn-model.ipynb`):\n",
    "      - Load the prepared training data.\n",
    "      - Perform feature engineering if deemed necessary (note: these three models do not require data standardization, unlike SVM and KNN).\n",
    "      - Conduct feature selection.\n",
    "      - Perform hyperparameter tuning.\n",
    "      - Identify a local champion for each model class (the best model for RF, DT, Elastic Net).\n",
    "      - Save local champions to a pickle file.\n",
    "\n",
    "6. **Model Evaluation:**\n",
    "   - In the notebook `notebooks/09.final-comparison-and-summary.ipynb`, load the models you created and check if they outperform the previously used models.\n",
    "\n",
    "7. **Version Control:**\n",
    "   - At the end of the class, even if the tasks are incomplete, [commit](https://docs.github.com/en/desktop/making-changes-in-a-branch/committing-and-reviewing-changes-to-your-project-in-github-desktop) your changes using GitHub Desktop.\n",
    "   - [Push](https://docs.github.com/en/desktop/making-changes-in-a-branch/pushing-changes-to-github-from-github-desktop) your changes to your remote GitHub repository.\n",
    "\n",
    "8. **Submission:**\n",
    "   - Send me the link to your GitHub project (my email: *mj.wozniak9@uw.edu.pl*).\n",
    "\n",
    "Good luck with the exercise! If you have any questions, feel free to ask."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "source": [
    "# Dependencies loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "from tqdm import tqdm\n",
    "from scipy.stats import uniform\n",
    "from sklearn.inspection import permutation_importance\n",
    "from sklearn.feature_selection import SequentialFeatureSelector as SFS\n",
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.tree  import DecisionTreeRegressor\n",
    "from ReliefF import ReliefF\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.mixture import GaussianMixture\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import (\n",
    "    LinearRegression,\n",
    "    Lasso,\n",
    "    Ridge,\n",
    "    ElasticNet\n",
    ")\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "from sklearn.dummy import DummyRegressor\n",
    "from sklearn.model_selection import (\n",
    "    KFold,\n",
    "    ShuffleSplit,\n",
    "    cross_val_score,\n",
    "    cross_validate,\n",
    "    RandomizedSearchCV,\n",
    "    GridSearchCV\n",
    ")\n",
    "from sklearn.metrics import (\n",
    "    mean_squared_error,\n",
    "    mean_absolute_error,\n",
    "    median_absolute_error,\n",
    "    mean_absolute_percentage_error,\n",
    "    r2_score,\n",
    "    make_scorer\n",
    ")\n",
    "\n",
    "pd.set_option(\"display.max_columns\", 500)\n",
    "pd.set_option(\"display.max_rows\", 150)\n",
    "\n",
    "# np.random.seed(1916)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree, Random Forest and Elastic Net"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_output_data_path = \".../data/output\"\n",
    "\n",
    "df = pd.read_csv(f\"{preprocessed_output_data_path}/train_fe.csv\", index_col=0)\n",
    "\n",
    "fr = pd.read_excel(f\"{preprocessed_output_data_path}/feature_ranking.xlsx\", index_col=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can omit that part in the case of Decision Tree \n",
    "# (as stated in the exercise description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['etr_y_past', 'etr_y_ma', 'txt', 'diff', 'ni', 'pi', 'intant', 'intant_sqrt', 'ta', 'revenue']\n"
     ]
    }
   ],
   "source": [
    "# Searching for \"good enough\" model to feature selection\n",
    "var = fr.mi_score.sort_values(ascending=False).index.tolist()[0:10]\n",
    "print(var)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63.190189111918315"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape[0] ** (0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=DecisionTreeRegressor(), n_jobs=-1,\n",
       "             param_grid={'max_depth': [None, 5, 10, 15, 20],\n",
       "                         'max_features': ['auto', 'sqrt', 'log2'],\n",
       "                         'min_samples_leaf': [1, 2, 4],\n",
       "                         'min_samples_split': [2, 5, 10]},\n",
       "             return_train_score=True,\n",
       "             scoring=make_scorer(mean_squared_error, greater_is_better=False))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the parameter grid\n",
    "param = {\n",
    "    \"max_depth\": [None, 5, 10, 15, 20],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": [1, 2, 4],\n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"],\n",
    "}\n",
    "\n",
    "# Define the mean squared error scorer\n",
    "mse = make_scorer(mean_squared_error, greater_is_better=False)\n",
    "\n",
    "# Create the DecisionTreeRegressor model\n",
    "model = DecisionTreeRegressor()\n",
    "\n",
    "# Create the GridSearchCV object\n",
    "grid_CV = GridSearchCV(\n",
    "    model, param, cv=5, scoring=mse, return_train_score=True, n_jobs=-1\n",
    ")\n",
    "\n",
    "# Fit the grid search to your data\n",
    "grid_CV.fit(df.loc[:, var].values, df.loc[:, \"etr\"].values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}\n"
     ]
    }
   ],
   "source": [
    "# Get the best parameters\n",
    "best_params = grid_CV.best_params_\n",
    "print(best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'mean_fit_time': array([0.09602318, 0.09837122, 0.0949203 , 0.08719249, 0.07798138,\n",
      "       0.09028826, 0.08354769, 0.0917398 , 0.09120336, 0.03666186,\n",
      "       0.03506136, 0.02604718, 0.02959561, 0.02095399, 0.03077555,\n",
      "       0.03885016, 0.02375045, 0.0237236 , 0.03246307, 0.03258634,\n",
      "       0.03741431, 0.02968779, 0.03018656, 0.02597985, 0.02463503,\n",
      "       0.02206926, 0.03017106, 0.03148799, 0.02590027, 0.02861176,\n",
      "       0.02816958, 0.02838688, 0.02843471, 0.02988653, 0.03364525,\n",
      "       0.03132849, 0.01167574, 0.01153188, 0.00740566, 0.01012535,\n",
      "       0.00575752, 0.01106195, 0.00752358, 0.0098175 , 0.01420555,\n",
      "       0.01164179, 0.01305232, 0.01097817, 0.00954418, 0.01628518,\n",
      "       0.01193423, 0.00939608, 0.01260509, 0.01303802, 0.05304685,\n",
      "       0.05430875, 0.0637578 , 0.05324702, 0.05264554, 0.06123562,\n",
      "       0.0607707 , 0.05731964, 0.06256399, 0.02012134, 0.01590466,\n",
      "       0.01953788, 0.01810355, 0.01528673, 0.02070103, 0.01621652,\n",
      "       0.01828384, 0.0171742 , 0.0180747 , 0.01714792, 0.01937761,\n",
      "       0.01709051, 0.01700535, 0.02111611, 0.01987414, 0.01815486,\n",
      "       0.01607661, 0.07320604, 0.07161999, 0.0740706 , 0.06789675,\n",
      "       0.06812596, 0.07533565, 0.07403898, 0.06516023, 0.07130589,\n",
      "       0.02103543, 0.02133718, 0.02507143, 0.02186751, 0.01899261,\n",
      "       0.02260141, 0.01986752, 0.02535887, 0.01985054, 0.02535267,\n",
      "       0.0330605 , 0.02519431, 0.02561116, 0.01985168, 0.0230948 ,\n",
      "       0.02362447, 0.03073831, 0.02578077, 0.08579631, 0.08938723,\n",
      "       0.08243375, 0.08523664, 0.07819796, 0.0866796 , 0.07058563,\n",
      "       0.07200074, 0.07110133, 0.02878399, 0.03034878, 0.0264657 ,\n",
      "       0.02530541, 0.02696123, 0.0230969 , 0.02174754, 0.0268374 ,\n",
      "       0.01519632, 0.02778506, 0.02625871, 0.02790461, 0.02479568,\n",
      "       0.02665348, 0.0261415 , 0.01631846, 0.02275424, 0.02407146]), 'std_fit_time': array([0.00463905, 0.00509617, 0.00694886, 0.00509618, 0.0080297 ,\n",
      "       0.00617245, 0.00862258, 0.01432119, 0.01418631, 0.00661593,\n",
      "       0.00401048, 0.00402386, 0.00642878, 0.00582828, 0.00352221,\n",
      "       0.00823309, 0.0058734 , 0.00732157, 0.01030448, 0.00512384,\n",
      "       0.01228511, 0.00375241, 0.00381054, 0.00493989, 0.00593711,\n",
      "       0.00498095, 0.00336431, 0.00358268, 0.00540466, 0.00383644,\n",
      "       0.00419523, 0.00663214, 0.01041475, 0.00410295, 0.00063555,\n",
      "       0.00278474, 0.00663062, 0.00609507, 0.00575696, 0.00643304,\n",
      "       0.00720619, 0.00370353, 0.00585048, 0.00632624, 0.00773377,\n",
      "       0.0066784 , 0.0072665 , 0.00670805, 0.00782901, 0.00381851,\n",
      "       0.00573861, 0.00526079, 0.00720322, 0.00446674, 0.006103  ,\n",
      "       0.00485511, 0.01185302, 0.00472155, 0.00705914, 0.01214571,\n",
      "       0.00983812, 0.00421097, 0.00953501, 0.00396468, 0.00354646,\n",
      "       0.00264665, 0.00320597, 0.00153477, 0.00761438, 0.00189632,\n",
      "       0.00301924, 0.00321024, 0.00561673, 0.00309603, 0.00794253,\n",
      "       0.00424975, 0.00298582, 0.00971345, 0.00638667, 0.00620432,\n",
      "       0.00056259, 0.00572355, 0.00627947, 0.00739655, 0.00616254,\n",
      "       0.00806712, 0.01550379, 0.00665352, 0.01085729, 0.00746283,\n",
      "       0.00539656, 0.00383696, 0.00173784, 0.00647676, 0.00468069,\n",
      "       0.00519567, 0.00674143, 0.00754198, 0.00267497, 0.0096932 ,\n",
      "       0.00488164, 0.00503994, 0.00798533, 0.00392883, 0.00373527,\n",
      "       0.00644327, 0.00649743, 0.01117933, 0.00763591, 0.01009756,\n",
      "       0.00558703, 0.00791575, 0.01597531, 0.01280199, 0.00271352,\n",
      "       0.00696287, 0.00449773, 0.0106175 , 0.00512443, 0.00505316,\n",
      "       0.0074328 , 0.00638136, 0.00834064, 0.00442026, 0.0044991 ,\n",
      "       0.00480373, 0.00714567, 0.00620072, 0.00615361, 0.00265328,\n",
      "       0.00654918, 0.00740755, 0.00426183, 0.00755498, 0.00636165]), 'mean_score_time': array([2.38080025e-03, 3.08036804e-04, 4.88805771e-04, 0.00000000e+00,\n",
      "       6.68354034e-03, 2.37417221e-04, 8.28552246e-04, 4.34780121e-04,\n",
      "       0.00000000e+00, 2.53887177e-03, 1.58023834e-03, 0.00000000e+00,\n",
      "       3.00621986e-03, 5.92808723e-03, 0.00000000e+00, 3.18527222e-05,\n",
      "       1.02829933e-03, 5.49373627e-03, 2.90193558e-03, 2.80151367e-03,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 1.33223534e-03, 0.00000000e+00, 0.00000000e+00,\n",
      "       1.33223534e-03, 0.00000000e+00, 0.00000000e+00, 1.64322853e-03,\n",
      "       0.00000000e+00, 2.00462341e-04, 1.99937820e-04, 1.43251419e-03,\n",
      "       0.00000000e+00, 1.10321045e-03, 2.60934830e-03, 0.00000000e+00,\n",
      "       2.80127525e-03, 1.22551918e-03, 2.10962296e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00, 1.99842453e-04, 6.00194931e-04,\n",
      "       0.00000000e+00, 6.00242615e-04, 2.00176239e-04, 6.00767136e-04,\n",
      "       4.21047211e-04, 1.17959976e-03, 2.51994133e-03, 3.95107269e-04,\n",
      "       0.00000000e+00, 8.10480118e-04, 1.30167007e-03, 1.60160065e-03,\n",
      "       0.00000000e+00, 1.97577477e-03, 1.91860199e-03, 1.38163567e-03,\n",
      "       1.00102425e-03, 3.07703018e-04, 5.35917282e-04, 1.60160065e-03,\n",
      "       8.09526443e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 1.24707222e-03, 0.00000000e+00, 7.84492493e-04,\n",
      "       1.18203163e-03, 1.28126144e-03, 0.00000000e+00, 0.00000000e+00,\n",
      "       3.49125862e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       1.07049942e-03, 0.00000000e+00, 0.00000000e+00, 1.10101700e-03,\n",
      "       3.42655182e-04, 2.84767151e-04, 3.09705734e-03, 0.00000000e+00,\n",
      "       1.61185265e-03, 0.00000000e+00, 1.51228905e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 3.15189362e-05, 3.30381393e-03, 0.00000000e+00,\n",
      "       2.24857330e-03, 0.00000000e+00, 1.23510361e-03, 1.32055283e-03,\n",
      "       1.09930038e-03, 0.00000000e+00, 2.70910263e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 5.28907776e-04, 3.36074829e-04, 0.00000000e+00,\n",
      "       9.90962982e-04, 0.00000000e+00, 1.11560822e-03, 0.00000000e+00,\n",
      "       3.00407410e-05, 2.81381607e-03, 0.00000000e+00, 4.28628922e-04,\n",
      "       3.24249268e-05, 2.70133018e-03, 1.53560638e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 5.34076691e-03, 2.20799446e-03, 3.21831703e-03,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.34332085e-03,\n",
      "       0.00000000e+00, 0.00000000e+00, 2.01988220e-04]), 'std_score_time': array([2.91993841e-03, 6.16073608e-04, 9.77611542e-04, 0.00000000e+00,\n",
      "       8.18563176e-03, 4.74834442e-04, 1.65710449e-03, 8.69560242e-04,\n",
      "       0.00000000e+00, 4.98539846e-03, 3.16047668e-03, 0.00000000e+00,\n",
      "       5.51696071e-03, 7.27837239e-03, 0.00000000e+00, 6.37054443e-05,\n",
      "       2.05659866e-03, 1.03220944e-02, 5.80387115e-03, 5.60302734e-03,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 2.66447067e-03, 0.00000000e+00, 0.00000000e+00,\n",
      "       2.66447067e-03, 0.00000000e+00, 0.00000000e+00, 3.28645706e-03,\n",
      "       0.00000000e+00, 4.00924683e-04, 3.99875641e-04, 2.86502838e-03,\n",
      "       0.00000000e+00, 2.20642090e-03, 5.21869659e-03, 0.00000000e+00,\n",
      "       5.60255051e-03, 2.45103836e-03, 4.21924591e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00, 3.99684906e-04, 4.90057140e-04,\n",
      "       0.00000000e+00, 4.90096251e-04, 4.00352478e-04, 4.90524343e-04,\n",
      "       5.16684053e-04, 2.35919952e-03, 3.26836180e-03, 7.58089646e-04,\n",
      "       0.00000000e+00, 1.55680478e-03, 2.60334015e-03, 3.20320129e-03,\n",
      "       0.00000000e+00, 2.92484623e-03, 2.91992346e-03, 2.76327133e-03,\n",
      "       2.00204849e-03, 6.15406036e-04, 1.07183456e-03, 3.20320129e-03,\n",
      "       1.61905289e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 2.49414444e-03, 0.00000000e+00, 1.56898499e-03,\n",
      "       2.36406326e-03, 2.56252289e-03, 0.00000000e+00, 0.00000000e+00,\n",
      "       3.63060834e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       2.14099884e-03, 0.00000000e+00, 0.00000000e+00, 2.02559163e-03,\n",
      "       6.85310364e-04, 5.69534302e-04, 6.19411469e-03, 0.00000000e+00,\n",
      "       3.22370529e-03, 0.00000000e+00, 3.02457809e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 6.30378723e-05, 4.04947295e-03, 0.00000000e+00,\n",
      "       3.48074140e-03, 0.00000000e+00, 2.47020721e-03, 2.64110565e-03,\n",
      "       2.19860077e-03, 0.00000000e+00, 5.41820526e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 1.05781555e-03, 6.72149658e-04, 0.00000000e+00,\n",
      "       1.98192596e-03, 0.00000000e+00, 2.23121643e-03, 0.00000000e+00,\n",
      "       6.00814819e-05, 4.47147175e-03, 0.00000000e+00, 8.57257843e-04,\n",
      "       6.48498535e-05, 5.40266037e-03, 3.07121277e-03, 0.00000000e+00,\n",
      "       0.00000000e+00, 6.70251613e-03, 4.41598892e-03, 4.95153695e-03,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.17695034e-03,\n",
      "       0.00000000e+00, 0.00000000e+00, 4.03976440e-04]), 'param_max_depth': masked_array(data=[None, None, None, None, None, None, None, None, None,\n",
      "                   None, None, None, None, None, None, None, None, None,\n",
      "                   None, None, None, None, None, None, None, None, None,\n",
      "                   5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n",
      "                   5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10,\n",
      "                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n",
      "                   10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15,\n",
      "                   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n",
      "                   15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n",
      "                   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n",
      "                   20, 20, 20, 20],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_max_features': masked_array(data=['auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'auto', 'auto', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'log2', 'log2', 'log2', 'auto',\n",
      "                   'auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'auto', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'log2', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'log2', 'log2', 'auto', 'auto',\n",
      "                   'auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'log2', 'log2', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'log2', 'auto', 'auto', 'auto',\n",
      "                   'auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'log2', 'log2', 'log2', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'auto', 'auto', 'auto', 'auto', 'auto', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'log2', 'log2', 'log2', 'log2', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2'],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_min_samples_leaf': masked_array(data=[1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_min_samples_split': masked_array(data=[2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5,\n",
      "                   10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10,\n",
      "                   2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5,\n",
      "                   10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10,\n",
      "                   2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5,\n",
      "                   10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10,\n",
      "                   2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5,\n",
      "                   10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10,\n",
      "                   2, 5, 10],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 15, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}], 'split0_test_score': array([-0.04463592, -0.0401845 , -0.03457658, -0.03419885, -0.03393472,\n",
      "       -0.02743963, -0.02805948, -0.02814249, -0.02708653, -0.05175064,\n",
      "       -0.03911417, -0.03783495, -0.03570185, -0.03235002, -0.02817538,\n",
      "       -0.02691779, -0.02793934, -0.02638254, -0.04142021, -0.03626801,\n",
      "       -0.03475689, -0.03422723, -0.03055273, -0.03232146, -0.0301045 ,\n",
      "       -0.028077  , -0.02598182, -0.02133365, -0.02124006, -0.02108951,\n",
      "       -0.01846557, -0.01837199, -0.01805337, -0.01871306, -0.01871306,\n",
      "       -0.01841648, -0.01738758, -0.01874763, -0.0210891 , -0.01857556,\n",
      "       -0.01695412, -0.01922447, -0.01866187, -0.01860361, -0.01883563,\n",
      "       -0.02230101, -0.02041561, -0.01824632, -0.01871393, -0.01908664,\n",
      "       -0.0193923 , -0.01940887, -0.01816583, -0.01792156, -0.03762772,\n",
      "       -0.03674437, -0.02576792, -0.0276502 , -0.02819011, -0.02264838,\n",
      "       -0.02426785, -0.02476622, -0.02355126, -0.02710486, -0.02472995,\n",
      "       -0.02850967, -0.02750211, -0.03045112, -0.02561852, -0.02381809,\n",
      "       -0.02663948, -0.02095391, -0.03117672, -0.02527082, -0.02890398,\n",
      "       -0.02407472, -0.03205291, -0.02739136, -0.0242425 , -0.0234334 ,\n",
      "       -0.02454317, -0.04771903, -0.04523428, -0.03177756, -0.0319994 ,\n",
      "       -0.03125534, -0.02620601, -0.02747081, -0.02707225, -0.02634421,\n",
      "       -0.03718492, -0.03443924, -0.03083618, -0.03491732, -0.02987146,\n",
      "       -0.02598509, -0.02444489, -0.02610928, -0.02704257, -0.04614064,\n",
      "       -0.02824728, -0.02679828, -0.03440114, -0.02806223, -0.03081407,\n",
      "       -0.02830232, -0.0301702 , -0.02707138, -0.04196204, -0.03914902,\n",
      "       -0.03550664, -0.03409511, -0.03428627, -0.02720514, -0.02804381,\n",
      "       -0.02835966, -0.0270267 , -0.04034616, -0.03893622, -0.03512536,\n",
      "       -0.03434286, -0.0312936 , -0.03489298, -0.02701847, -0.02919013,\n",
      "       -0.02493055, -0.04247969, -0.03579801, -0.03341074, -0.03343225,\n",
      "       -0.02944622, -0.02947545, -0.02909974, -0.02662655, -0.02412868]), 'split1_test_score': array([-0.05177882, -0.03927112, -0.03772585, -0.03996681, -0.03871112,\n",
      "       -0.03541075, -0.03469086, -0.03451605, -0.03387596, -0.04378211,\n",
      "       -0.03575721, -0.03264147, -0.03549938, -0.03965334, -0.03494715,\n",
      "       -0.0328515 , -0.02904207, -0.03274239, -0.04851557, -0.0393046 ,\n",
      "       -0.04039292, -0.03273956, -0.03340455, -0.03361847, -0.02763436,\n",
      "       -0.0260811 , -0.02789478, -0.02579717, -0.02241207, -0.02190512,\n",
      "       -0.02251528, -0.02260262, -0.02250402, -0.02285011, -0.02286441,\n",
      "       -0.02284335, -0.01970256, -0.01898511, -0.02086583, -0.01942034,\n",
      "       -0.02132847, -0.02307599, -0.02290746, -0.02047644, -0.02073801,\n",
      "       -0.0222146 , -0.02106199, -0.02009358, -0.02223721, -0.02227402,\n",
      "       -0.02123109, -0.02184115, -0.02220099, -0.01943906, -0.03103349,\n",
      "       -0.03086374, -0.02927146, -0.03167329, -0.0293198 , -0.029666  ,\n",
      "       -0.02954798, -0.02982414, -0.02920131, -0.03410935, -0.03418356,\n",
      "       -0.02550247, -0.02755981, -0.03170679, -0.02615111, -0.02421493,\n",
      "       -0.02468713, -0.02354514, -0.03546461, -0.02731187, -0.02557718,\n",
      "       -0.03014236, -0.02508314, -0.02452385, -0.0234593 , -0.02282301,\n",
      "       -0.02422649, -0.0376906 , -0.03538892, -0.03451432, -0.03606519,\n",
      "       -0.03372758, -0.03343923, -0.03380743, -0.03373134, -0.03330249,\n",
      "       -0.03302637, -0.03014707, -0.03496883, -0.03567344, -0.0329068 ,\n",
      "       -0.02566653, -0.02797395, -0.0285484 , -0.02689943, -0.03829522,\n",
      "       -0.03582331, -0.0341145 , -0.0358249 , -0.0294282 , -0.03204829,\n",
      "       -0.02996396, -0.02567318, -0.02756855, -0.04276974, -0.03820311,\n",
      "       -0.03658252, -0.03877244, -0.03642961, -0.03610284, -0.03463594,\n",
      "       -0.03443281, -0.0337582 , -0.03871543, -0.03251564, -0.03651438,\n",
      "       -0.03480161, -0.03650147, -0.03078901, -0.03005511, -0.03315698,\n",
      "       -0.02742124, -0.04365721, -0.03152904, -0.03689214, -0.03652185,\n",
      "       -0.03766658, -0.02958672, -0.0311636 , -0.03077003, -0.02603157]), 'split2_test_score': array([-0.03894326, -0.03648526, -0.03222332, -0.03305746, -0.0321854 ,\n",
      "       -0.03044996, -0.02730608, -0.02700172, -0.02661894, -0.04066198,\n",
      "       -0.03438736, -0.03280282, -0.03447292, -0.03599868, -0.03402433,\n",
      "       -0.03013367, -0.02867155, -0.02685574, -0.03915711, -0.03672442,\n",
      "       -0.03280966, -0.03434837, -0.02989202, -0.02924508, -0.03019303,\n",
      "       -0.02759232, -0.03030292, -0.02207563, -0.02207563, -0.02201946,\n",
      "       -0.02281687, -0.02281687, -0.0227607 , -0.0221755 , -0.02122831,\n",
      "       -0.02219396, -0.02195484, -0.02051497, -0.02093562, -0.01995246,\n",
      "       -0.02147393, -0.02076701, -0.02155701, -0.02123307, -0.01965797,\n",
      "       -0.02171957, -0.0221722 , -0.02533763, -0.02141479, -0.0212424 ,\n",
      "       -0.02120068, -0.01909046, -0.02195425, -0.02164891, -0.03009606,\n",
      "       -0.02794029, -0.0271093 , -0.02832306, -0.02728031, -0.02618616,\n",
      "       -0.02476059, -0.02502716, -0.02438655, -0.02920575, -0.0234351 ,\n",
      "       -0.02880588, -0.02625991, -0.02757365, -0.02604325, -0.02645829,\n",
      "       -0.02394777, -0.02681312, -0.02745136, -0.02805598, -0.02304923,\n",
      "       -0.0266128 , -0.02699767, -0.025535  , -0.02146965, -0.02277295,\n",
      "       -0.02302072, -0.03544189, -0.03314182, -0.03273822, -0.03096611,\n",
      "       -0.03046659, -0.02851213, -0.02505618, -0.02609508, -0.02572565,\n",
      "       -0.0374571 , -0.03323662, -0.03038566, -0.03236857, -0.02814141,\n",
      "       -0.02575383, -0.02797244, -0.02827809, -0.02632978, -0.03349458,\n",
      "       -0.03657169, -0.02620069, -0.03208736, -0.02932905, -0.02408137,\n",
      "       -0.02664693, -0.02892638, -0.0251415 , -0.0373047 , -0.03523291,\n",
      "       -0.03249357, -0.03192917, -0.03122161, -0.02977324, -0.02589533,\n",
      "       -0.02672744, -0.02598115, -0.03535875, -0.03010131, -0.03264429,\n",
      "       -0.02899473, -0.03178906, -0.03039799, -0.02695974, -0.02436524,\n",
      "       -0.02734159, -0.04131429, -0.04133304, -0.0283994 , -0.03465024,\n",
      "       -0.0339548 , -0.03645529, -0.0258377 , -0.02526022, -0.02656662]), 'split3_test_score': array([-0.05391935, -0.04969361, -0.04230365, -0.04371761, -0.04304588,\n",
      "       -0.03909762, -0.03427126, -0.03555948, -0.03396373, -0.04007755,\n",
      "       -0.04580527, -0.03644774, -0.03929622, -0.03619094, -0.03502339,\n",
      "       -0.03279347, -0.03416628, -0.03203086, -0.04992753, -0.04800234,\n",
      "       -0.03969321, -0.03987877, -0.04208895, -0.03827968, -0.03288254,\n",
      "       -0.03570474, -0.03224317, -0.02683713, -0.02682501, -0.02682501,\n",
      "       -0.02714693, -0.02714897, -0.02685506, -0.0260959 , -0.0260959 ,\n",
      "       -0.0260959 , -0.02819446, -0.02670582, -0.02572446, -0.02782417,\n",
      "       -0.02544841, -0.02573477, -0.02704711, -0.02515165, -0.02599496,\n",
      "       -0.02793747, -0.02565487, -0.02757341, -0.02756   , -0.02630596,\n",
      "       -0.02677977, -0.0262853 , -0.0257633 , -0.02626351, -0.03886088,\n",
      "       -0.03656236, -0.03490107, -0.03831456, -0.03683658, -0.03458174,\n",
      "       -0.03143349, -0.03268227, -0.03123241, -0.03706625, -0.03602151,\n",
      "       -0.03040243, -0.03242741, -0.0299563 , -0.031136  , -0.02832958,\n",
      "       -0.03270855, -0.02834834, -0.03263341, -0.03522711, -0.03252125,\n",
      "       -0.03254223, -0.03481555, -0.02934454, -0.03239574, -0.02792707,\n",
      "       -0.02917448, -0.04583415, -0.04329264, -0.04019882, -0.04265229,\n",
      "       -0.04150259, -0.03790417, -0.03485153, -0.03337376, -0.03320713,\n",
      "       -0.04291247, -0.04561923, -0.03397063, -0.04353682, -0.03588921,\n",
      "       -0.03338423, -0.03187343, -0.03374769, -0.03278942, -0.04345386,\n",
      "       -0.03871697, -0.03587242, -0.0337142 , -0.03790064, -0.03247666,\n",
      "       -0.03104342, -0.0323091 , -0.0318151 , -0.04998022, -0.04532146,\n",
      "       -0.04228665, -0.04473609, -0.04315625, -0.03875529, -0.0352662 ,\n",
      "       -0.03421629, -0.03369295, -0.04570743, -0.03831439, -0.03907015,\n",
      "       -0.03878852, -0.04320421, -0.03796512, -0.03434557, -0.03216418,\n",
      "       -0.03487238, -0.04365721, -0.04615531, -0.03660596, -0.0410197 ,\n",
      "       -0.03530804, -0.03285124, -0.03111317, -0.03366282, -0.03199604]), 'split4_test_score': array([-0.04971186, -0.04186727, -0.03934818, -0.04228024, -0.04008854,\n",
      "       -0.03667536, -0.03415115, -0.03412089, -0.03391367, -0.04092876,\n",
      "       -0.05476635, -0.0328346 , -0.03275347, -0.03738415, -0.03684633,\n",
      "       -0.03521486, -0.03091884, -0.02979398, -0.04122698, -0.03016804,\n",
      "       -0.03438592, -0.0383284 , -0.03467658, -0.03517307, -0.03235803,\n",
      "       -0.03204958, -0.03265988, -0.02441769, -0.0247432 , -0.02406693,\n",
      "       -0.02401094, -0.02401094, -0.02401094, -0.02420881, -0.02420881,\n",
      "       -0.02420881, -0.0264473 , -0.02347717, -0.02333112, -0.02301272,\n",
      "       -0.02403696, -0.02282645, -0.0232339 , -0.02526264, -0.02347327,\n",
      "       -0.02352838, -0.02450222, -0.02477458, -0.02344698, -0.0238488 ,\n",
      "       -0.0258383 , -0.02349957, -0.02410849, -0.02380964, -0.03355642,\n",
      "       -0.03243602, -0.03358547, -0.03085181, -0.03078264, -0.0308755 ,\n",
      "       -0.03128228, -0.03128774, -0.03115068, -0.02819161, -0.03052171,\n",
      "       -0.02768219, -0.03120224, -0.0289024 , -0.02765338, -0.02755482,\n",
      "       -0.02930364, -0.0304143 , -0.02984269, -0.02567463, -0.02708085,\n",
      "       -0.02916004, -0.03056035, -0.03082936, -0.02967922, -0.02928434,\n",
      "       -0.02805578, -0.04378861, -0.04011889, -0.0381234 , -0.03831775,\n",
      "       -0.03756491, -0.0347282 , -0.03394022, -0.03375583, -0.03363302,\n",
      "       -0.03688851, -0.03443458, -0.03099824, -0.03529523, -0.03630244,\n",
      "       -0.03862302, -0.02916694, -0.03567197, -0.02970121, -0.03940649,\n",
      "       -0.03671169, -0.02850049, -0.0318601 , -0.03432258, -0.02856909,\n",
      "       -0.03024869, -0.03181485, -0.02767627, -0.04138372, -0.04144237,\n",
      "       -0.03909518, -0.04033091, -0.03938508, -0.03654128, -0.03404937,\n",
      "       -0.03419943, -0.03375542, -0.04248419, -0.04485792, -0.03365611,\n",
      "       -0.03624989, -0.03694697, -0.0312965 , -0.03316626, -0.03358318,\n",
      "       -0.03175794, -0.04163136, -0.04425017, -0.03775232, -0.04041034,\n",
      "       -0.03177474, -0.03311777, -0.03498406, -0.03336501, -0.02898494]), 'mean_test_score': array([-0.04779784, -0.04150035, -0.03723552, -0.03864419, -0.03759313,\n",
      "       -0.03381466, -0.03169577, -0.03186813, -0.03109177, -0.04344021,\n",
      "       -0.04196607, -0.03451232, -0.03554477, -0.03631543, -0.03380332,\n",
      "       -0.03158226, -0.03014761, -0.0295611 , -0.04404948, -0.03809348,\n",
      "       -0.03640772, -0.03590447, -0.03412296, -0.03372755, -0.03063449,\n",
      "       -0.02990095, -0.02981651, -0.02409225, -0.0234592 , -0.0231812 ,\n",
      "       -0.02299112, -0.02299028, -0.02283682, -0.02280867, -0.0226221 ,\n",
      "       -0.0227517 , -0.02273735, -0.02168614, -0.02238923, -0.02175705,\n",
      "       -0.02184838, -0.02232574, -0.02268147, -0.02214548, -0.02173997,\n",
      "       -0.02354021, -0.02276138, -0.0232051 , -0.02267458, -0.02255156,\n",
      "       -0.02288843, -0.02202507, -0.02243857, -0.02181654, -0.03423491,\n",
      "       -0.03290936, -0.03012704, -0.03136258, -0.03048189, -0.02879156,\n",
      "       -0.02825844, -0.02871751, -0.02790444, -0.03113556, -0.02977837,\n",
      "       -0.02818053, -0.02899029, -0.02971805, -0.02732045, -0.02607514,\n",
      "       -0.02745731, -0.02601496, -0.03131376, -0.02830808, -0.02742649,\n",
      "       -0.02850643, -0.02990192, -0.02752482, -0.02624928, -0.02524815,\n",
      "       -0.02580413, -0.04209486, -0.03943531, -0.03547047, -0.03600015,\n",
      "       -0.0349034 , -0.03215795, -0.03102523, -0.03080565, -0.0304425 ,\n",
      "       -0.03749387, -0.03557535, -0.03223191, -0.03635828, -0.03262226,\n",
      "       -0.02988254, -0.02828633, -0.03047108, -0.02855248, -0.04015816,\n",
      "       -0.03521419, -0.03029728, -0.03357754, -0.03180854, -0.0295979 ,\n",
      "       -0.02924106, -0.02977874, -0.02785456, -0.04268009, -0.03986977,\n",
      "       -0.03719291, -0.03797274, -0.03689576, -0.03367556, -0.03157813,\n",
      "       -0.03158713, -0.03084288, -0.04052239, -0.0369451 , -0.03540206,\n",
      "       -0.03463552, -0.03594706, -0.03306832, -0.03030903, -0.03049194,\n",
      "       -0.02926474, -0.04254795, -0.03981312, -0.03461211, -0.03720688,\n",
      "       -0.03363008, -0.03229729, -0.03043965, -0.02993693, -0.02754157]), 'std_test_score': array([0.00539233, 0.00445233, 0.00353785, 0.00428211, 0.00399592,\n",
      "       0.00425683, 0.00329012, 0.00355738, 0.00346443, 0.00434772,\n",
      "       0.0075194 , 0.00219194, 0.00214664, 0.00237167, 0.00295903,\n",
      "       0.002833  , 0.00223705, 0.00259603, 0.00432001, 0.00579088,\n",
      "       0.00304747, 0.00271742, 0.00435722, 0.00299643, 0.00187088,\n",
      "       0.00350852, 0.00255374, 0.00210825, 0.00204512, 0.00206954,\n",
      "       0.00279457, 0.00282295, 0.00284685, 0.00244716, 0.00252455,\n",
      "       0.00254639, 0.00404935, 0.00302348, 0.00190447, 0.00338305,\n",
      "       0.00290222, 0.00221281, 0.00271428, 0.0026426 , 0.00264133,\n",
      "       0.00227788, 0.00200701, 0.0034746 , 0.00289582, 0.00243208,\n",
      "       0.00288661, 0.00267634, 0.00254519, 0.00298662, 0.00348569,\n",
      "       0.00338089, 0.00356631, 0.00378703, 0.00338601, 0.00407824,\n",
      "       0.003132  , 0.00324904, 0.00330518, 0.00381193, 0.00499317,\n",
      "       0.00160353, 0.00238422, 0.00140093, 0.00202803, 0.00178737,\n",
      "       0.00321385, 0.00338083, 0.00268596, 0.00360802, 0.00318871,\n",
      "       0.00291949, 0.00348882, 0.002333  , 0.00410364, 0.00278456,\n",
      "       0.00237721, 0.00473586, 0.00458161, 0.00320663, 0.00426554,\n",
      "       0.00412332, 0.00424228, 0.00397849, 0.0034637 , 0.00360685,\n",
      "       0.00315541, 0.00526132, 0.00186508, 0.0037716 , 0.00322312,\n",
      "       0.00526629, 0.00239147, 0.00361432, 0.0024176 , 0.00436098,\n",
      "       0.00361285, 0.00394732, 0.00147769, 0.00372244, 0.00307445,\n",
      "       0.00157462, 0.0023784 , 0.00218053, 0.00410831, 0.00337614,\n",
      "       0.00331254, 0.00454982, 0.00411371, 0.00440459, 0.00384304,\n",
      "       0.00334269, 0.00355822, 0.00348404, 0.00519442, 0.00225488,\n",
      "       0.00321824, 0.00431085, 0.00292484, 0.0030518 , 0.00342595,\n",
      "       0.00356494, 0.00098261, 0.00542159, 0.00343732, 0.00303491,\n",
      "       0.00283412, 0.00259149, 0.00298673, 0.00343972, 0.00271308]), 'rank_test_score': array([135, 128, 117, 122, 119,  95,  81,  83,  74, 133, 129,  98, 105,\n",
      "       110,  94,  79,  62,  51, 134, 121, 112, 107,  96,  93,  70,  58,\n",
      "        56,  27,  25,  23,  22,  21,  19,  18,  12,  16,  15,   1,   9,\n",
      "         3,   5,   8,  14,   7,   2,  26,  17,  24,  13,  11,  20,   6,\n",
      "        10,   4,  97,  88,  61,  77,  68,  47,  41,  46,  39,  75,  54,\n",
      "        40,  48,  53,  33,  31,  35,  30,  76,  43,  34,  44,  59,  36,\n",
      "        32,  28,  29, 130, 123, 104, 109, 101,  84,  73,  71,  66, 118,\n",
      "       106,  85, 111,  87,  57,  42,  67,  45, 126, 102,  63,  90,  82,\n",
      "        52,  49,  55,  38, 132, 125, 115, 120, 113,  92,  78,  80,  72,\n",
      "       127, 114, 103, 100, 108,  89,  64,  69,  50, 131, 124,  99, 116,\n",
      "        91,  86,  65,  60,  37]), 'split0_train_score': array([-0.00070506, -0.00309127, -0.00706858, -0.00498408, -0.00571418,\n",
      "       -0.00885043, -0.00961168, -0.0096406 , -0.01034353, -0.00070506,\n",
      "       -0.00462888, -0.00744434, -0.00613112, -0.00645488, -0.00962479,\n",
      "       -0.01029827, -0.01073895, -0.010922  , -0.00070506, -0.00423259,\n",
      "       -0.00747953, -0.00583236, -0.00650833, -0.00989386, -0.01074964,\n",
      "       -0.01050073, -0.01119676, -0.01824556, -0.01824556, -0.01837002,\n",
      "       -0.01837076, -0.01837076, -0.0186493 , -0.01812182, -0.01812182,\n",
      "       -0.01822228, -0.01850373, -0.01907189, -0.01893504, -0.0189845 ,\n",
      "       -0.01912768, -0.0190748 , -0.01823222, -0.01890924, -0.01874995,\n",
      "       -0.01867697, -0.01857271, -0.0186154 , -0.01912197, -0.01883222,\n",
      "       -0.01934647, -0.01886489, -0.01906789, -0.01911605, -0.01100871,\n",
      "       -0.01211022, -0.01347771, -0.01154068, -0.01186861, -0.01379522,\n",
      "       -0.01289102, -0.01286009, -0.01336893, -0.01118592, -0.01097394,\n",
      "       -0.01332049, -0.01222875, -0.01346632, -0.01420457, -0.01460947,\n",
      "       -0.0140978 , -0.01404   , -0.01075379, -0.01099148, -0.01410651,\n",
      "       -0.01337476, -0.01177957, -0.01476371, -0.01358687, -0.01469811,\n",
      "       -0.01398145, -0.00457569, -0.0062743 , -0.00951148, -0.00705883,\n",
      "       -0.00758779, -0.01026631, -0.01038298, -0.01041189, -0.01107653,\n",
      "       -0.0047042 , -0.00841902, -0.0091617 , -0.0072375 , -0.00874988,\n",
      "       -0.01066303, -0.01168176, -0.01147428, -0.01180766, -0.00331364,\n",
      "       -0.00742287, -0.01104791, -0.00803806, -0.00740894, -0.01014061,\n",
      "       -0.01173732, -0.0113931 , -0.01131783, -0.00156707, -0.00376974,\n",
      "       -0.00756245, -0.00516083, -0.00601518, -0.00907491, -0.00978081,\n",
      "       -0.00975189, -0.01046331, -0.00115573, -0.0050116 , -0.00867175,\n",
      "       -0.0062196 , -0.00610227, -0.00972279, -0.01119512, -0.01090656,\n",
      "       -0.0112038 , -0.00145837, -0.00541907, -0.00767862, -0.00606916,\n",
      "       -0.00666112, -0.00917189, -0.01096746, -0.01054847, -0.0116353 ]), 'split1_train_score': array([-0.00080741, -0.00352735, -0.00598438, -0.00499883, -0.00567523,\n",
      "       -0.00817671, -0.00940241, -0.00940194, -0.00997467, -0.00080741,\n",
      "       -0.00432308, -0.0073263 , -0.00587462, -0.00643437, -0.00908033,\n",
      "       -0.0107117 , -0.01091451, -0.01123045, -0.00080741, -0.00399376,\n",
      "       -0.00722606, -0.00592741, -0.00632665, -0.00962178, -0.01105655,\n",
      "       -0.01038651, -0.01113172, -0.01742345, -0.01766641, -0.01786368,\n",
      "       -0.01758004, -0.01758004, -0.01777731, -0.0175319 , -0.0175319 ,\n",
      "       -0.01766767, -0.01892992, -0.01847151, -0.01998104, -0.01850248,\n",
      "       -0.01881202, -0.01871849, -0.01886499, -0.01891036, -0.01837933,\n",
      "       -0.01737773, -0.0184888 , -0.0180104 , -0.01789548, -0.018443  ,\n",
      "       -0.01799781, -0.01812212, -0.0186217 , -0.019159  , -0.01066631,\n",
      "       -0.01155855, -0.01232454, -0.01093826, -0.01127139, -0.01230929,\n",
      "       -0.01256353, -0.01256353, -0.01279308, -0.01113813, -0.01219153,\n",
      "       -0.01214099, -0.01103749, -0.01210601, -0.01357984, -0.01399622,\n",
      "       -0.01411801, -0.01409459, -0.01054728, -0.01304029, -0.0132121 ,\n",
      "       -0.01068257, -0.01157062, -0.01376097, -0.01395207, -0.01335413,\n",
      "       -0.01592916, -0.0046801 , -0.00649031, -0.00832324, -0.00702841,\n",
      "       -0.00759908, -0.00949115, -0.01017495, -0.01017518, -0.01063161,\n",
      "       -0.00411117, -0.00576965, -0.00891206, -0.00688219, -0.00821341,\n",
      "       -0.01108789, -0.01130277, -0.01146769, -0.01170592, -0.00361871,\n",
      "       -0.00557722, -0.00986755, -0.00740193, -0.00852074, -0.0101651 ,\n",
      "       -0.01131307, -0.01158225, -0.01145426, -0.00179985, -0.00429236,\n",
      "       -0.0065953 , -0.0054806 , -0.00612175, -0.00849615, -0.00952489,\n",
      "       -0.0095256 , -0.01008836, -0.00172889, -0.0042402 , -0.0076225 ,\n",
      "       -0.00613996, -0.00684857, -0.00950029, -0.01019623, -0.01089332,\n",
      "       -0.01126752, -0.00287283, -0.00493692, -0.00699084, -0.00647632,\n",
      "       -0.00708963, -0.00976024, -0.01102538, -0.01115079, -0.01088191]), 'split2_train_score': array([-0.00063644, -0.00345368, -0.00583676, -0.00486669, -0.00569577,\n",
      "       -0.00781235, -0.00928672, -0.00929432, -0.01007233, -0.00063644,\n",
      "       -0.00389892, -0.00751651, -0.00564884, -0.0065271 , -0.0089218 ,\n",
      "       -0.01089143, -0.01042548, -0.01075427, -0.00063644, -0.00407732,\n",
      "       -0.0072882 , -0.00613579, -0.00674921, -0.00928453, -0.01034558,\n",
      "       -0.01027378, -0.01074448, -0.01703227, -0.01720638, -0.01722023,\n",
      "       -0.01719206, -0.01719206, -0.01720591, -0.01747629, -0.01747629,\n",
      "       -0.01751706, -0.01789622, -0.01822471, -0.01784512, -0.01816777,\n",
      "       -0.01861352, -0.01818462, -0.01811476, -0.0185538 , -0.01829248,\n",
      "       -0.01837117, -0.01801366, -0.01818593, -0.01834858, -0.01855088,\n",
      "       -0.01844553, -0.01911758, -0.01800252, -0.01881932, -0.00880794,\n",
      "       -0.0103424 , -0.01101767, -0.01060976, -0.01099284, -0.01186849,\n",
      "       -0.01260421, -0.01259661, -0.01296401, -0.00898854, -0.01212954,\n",
      "       -0.01153993, -0.01106752, -0.01158784, -0.01227784, -0.01297727,\n",
      "       -0.01302666, -0.01399918, -0.00962276, -0.01150257, -0.01394742,\n",
      "       -0.01051259, -0.01229574, -0.01267882, -0.0138213 , -0.01336582,\n",
      "       -0.01449868, -0.00447454, -0.00648057, -0.00826305, -0.00736594,\n",
      "       -0.00796454, -0.00949531, -0.01051038, -0.01051038, -0.01106533,\n",
      "       -0.00387833, -0.00605766, -0.00934084, -0.00767151, -0.00842782,\n",
      "       -0.01019967, -0.01085004, -0.01072949, -0.01146527, -0.00563692,\n",
      "       -0.00553899, -0.00807855, -0.00736758, -0.00788846, -0.01015282,\n",
      "       -0.01087029, -0.01130967, -0.01144636, -0.00200736, -0.004612  ,\n",
      "       -0.0066555 , -0.00564594, -0.00642967, -0.00831883, -0.00956307,\n",
      "       -0.00957067, -0.01033802, -0.00129898, -0.00411693, -0.0071927 ,\n",
      "       -0.00533143, -0.0065372 , -0.00866642, -0.0106215 , -0.01061373,\n",
      "       -0.01079046, -0.00091878, -0.00438787, -0.00837853, -0.00586109,\n",
      "       -0.00632385, -0.00961243, -0.01101728, -0.01039942, -0.0110937 ]), 'split3_train_score': array([-0.00062963, -0.00322627, -0.00591265, -0.00427988, -0.004602  ,\n",
      "       -0.00727478, -0.00911277, -0.00911277, -0.00968698, -0.00062963,\n",
      "       -0.00382408, -0.00568377, -0.00560618, -0.005799  , -0.00863404,\n",
      "       -0.01017375, -0.00996066, -0.01082124, -0.00062963, -0.00419687,\n",
      "       -0.00654631, -0.00544152, -0.00609632, -0.00860109, -0.01012044,\n",
      "       -0.00954038, -0.01023641, -0.0158301 , -0.01610027, -0.01610027,\n",
      "       -0.0161913 , -0.0161913 , -0.01627073, -0.0167158 , -0.0167158 ,\n",
      "       -0.0167158 , -0.01735882, -0.01737518, -0.01732656, -0.01699795,\n",
      "       -0.01656814, -0.01719002, -0.01713487, -0.0172889 , -0.01767497,\n",
      "       -0.01665845, -0.0171841 , -0.01769137, -0.01676761, -0.01709488,\n",
      "       -0.01718988, -0.01791928, -0.01793304, -0.01746455, -0.00893951,\n",
      "       -0.01007238, -0.01115062, -0.00988299, -0.00998978, -0.01126836,\n",
      "       -0.01154747, -0.01154747, -0.01194546, -0.00907091, -0.01015938,\n",
      "       -0.01152897, -0.0106278 , -0.01125492, -0.0123731 , -0.012521  ,\n",
      "       -0.01274479, -0.01244599, -0.0081802 , -0.01102445, -0.01256233,\n",
      "       -0.00928655, -0.00992308, -0.01176484, -0.01348828, -0.01273976,\n",
      "       -0.01261929, -0.0031778 , -0.00529807, -0.007491  , -0.00551687,\n",
      "       -0.0057714 , -0.00810084, -0.00957411, -0.00957411, -0.01008216,\n",
      "       -0.00248515, -0.00595811, -0.00829217, -0.0060137 , -0.00697722,\n",
      "       -0.00999132, -0.01102241, -0.01046066, -0.0105861 , -0.00326005,\n",
      "       -0.0056362 , -0.00866325, -0.00642408, -0.00862651, -0.009547  ,\n",
      "       -0.01087935, -0.01078354, -0.01151615, -0.001023  , -0.00351178,\n",
      "       -0.00611176, -0.00444765, -0.00478261, -0.0074019 , -0.00919989,\n",
      "       -0.00919989, -0.00975972, -0.00123129, -0.00463008, -0.00636381,\n",
      "       -0.00584982, -0.00595301, -0.00871307, -0.00988224, -0.01020272,\n",
      "       -0.00991544, -0.0013984 , -0.00375219, -0.00725788, -0.00523033,\n",
      "       -0.00626523, -0.00823104, -0.01019848, -0.01045729, -0.01062009]), 'split4_train_score': array([-0.00070919, -0.00329356, -0.00562829, -0.00440884, -0.00525227,\n",
      "       -0.00760645, -0.0085866 , -0.0085866 , -0.00926473, -0.00070919,\n",
      "       -0.00355915, -0.00669266, -0.00592496, -0.00638792, -0.00917989,\n",
      "       -0.01000237, -0.00978674, -0.01013467, -0.00070919, -0.00435748,\n",
      "       -0.00698625, -0.0055935 , -0.00601744, -0.00876134, -0.00974742,\n",
      "       -0.01030472, -0.01042197, -0.01576951, -0.01620951, -0.01620951,\n",
      "       -0.01636753, -0.01636753, -0.01636753, -0.01624081, -0.01624081,\n",
      "       -0.01624081, -0.01710733, -0.01872274, -0.01704449, -0.01772925,\n",
      "       -0.01779916, -0.01725255, -0.01789398, -0.01730161, -0.01780698,\n",
      "       -0.01716532, -0.01710242, -0.01720212, -0.01738837, -0.01724417,\n",
      "       -0.01701249, -0.01796304, -0.01762505, -0.01791594, -0.00868416,\n",
      "       -0.00998223, -0.01039361, -0.01040029, -0.01063504, -0.01133303,\n",
      "       -0.01156158, -0.01156158, -0.01187284, -0.01004397, -0.01199162,\n",
      "       -0.01342883, -0.01172123, -0.01219263, -0.01348189, -0.01251774,\n",
      "       -0.01240241, -0.01326029, -0.01008428, -0.01212132, -0.01312149,\n",
      "       -0.01297865, -0.01144801, -0.01237351, -0.01275277, -0.01308854,\n",
      "       -0.01248905, -0.00351482, -0.00557811, -0.00739986, -0.00613881,\n",
      "       -0.00687548, -0.00873191, -0.00954121, -0.00954121, -0.01008285,\n",
      "       -0.00316686, -0.00546382, -0.00869254, -0.00785525, -0.00790035,\n",
      "       -0.0092192 , -0.01067056, -0.00958921, -0.01090417, -0.00347168,\n",
      "       -0.00688655, -0.00918831, -0.00729335, -0.00743272, -0.00976937,\n",
      "       -0.0107465 , -0.01110298, -0.011344  , -0.00173111, -0.00412734,\n",
      "       -0.00633931, -0.00506369, -0.00554963, -0.00789797, -0.00884681,\n",
      "       -0.00884681, -0.00951598, -0.00167554, -0.00448844, -0.00781977,\n",
      "       -0.00576853, -0.00707961, -0.00913681, -0.00992537, -0.00999654,\n",
      "       -0.01132941, -0.00136494, -0.00474552, -0.00737202, -0.00554593,\n",
      "       -0.00695245, -0.00938422, -0.01001818, -0.00992048, -0.01070325]), 'mean_train_score': array([-0.00069755, -0.00331843, -0.00608613, -0.00470766, -0.00538789,\n",
      "       -0.00794414, -0.00920004, -0.00920725, -0.00986845, -0.00069755,\n",
      "       -0.00404682, -0.00693272, -0.00583714, -0.00632065, -0.00908817,\n",
      "       -0.0104155 , -0.01036527, -0.01077253, -0.00069755, -0.00417161,\n",
      "       -0.00710527, -0.00578611, -0.00633959, -0.00923252, -0.01040393,\n",
      "       -0.01020122, -0.01074627, -0.01686018, -0.01708563, -0.01715274,\n",
      "       -0.01714034, -0.01714034, -0.01725415, -0.01721733, -0.01721733,\n",
      "       -0.01727273, -0.01795921, -0.01837321, -0.01822645, -0.01807639,\n",
      "       -0.01818411, -0.0180841 , -0.01804817, -0.01819278, -0.01818074,\n",
      "       -0.01764993, -0.01787234, -0.01794104, -0.0179044 , -0.01803303,\n",
      "       -0.01799843, -0.01839738, -0.01825004, -0.01849497, -0.00962133,\n",
      "       -0.01081315, -0.01167283, -0.0106744 , -0.01095153, -0.01211488,\n",
      "       -0.01223356, -0.01222586, -0.01258886, -0.01008549, -0.0114892 ,\n",
      "       -0.01239184, -0.01133656, -0.01212155, -0.01318345, -0.01332434,\n",
      "       -0.01327793, -0.01356801, -0.00983766, -0.01173602, -0.01338997,\n",
      "       -0.01136702, -0.0114034 , -0.01306837, -0.01352026, -0.01344927,\n",
      "       -0.01390352, -0.00408459, -0.00602427, -0.00819773, -0.00662177,\n",
      "       -0.00715966, -0.0092171 , -0.01003672, -0.01004255, -0.0105877 ,\n",
      "       -0.00366915, -0.00633365, -0.00887986, -0.00713203, -0.00805374,\n",
      "       -0.01023222, -0.01110551, -0.01074427, -0.01129382, -0.0038602 ,\n",
      "       -0.00621237, -0.00936911, -0.007305  , -0.00797547, -0.00995498,\n",
      "       -0.01110931, -0.01123431, -0.01141572, -0.00162568, -0.00406264,\n",
      "       -0.00665287, -0.00515974, -0.00577977, -0.00823795, -0.00938309,\n",
      "       -0.00937897, -0.01003308, -0.00141809, -0.00449745, -0.00753411,\n",
      "       -0.00586187, -0.00650413, -0.00914788, -0.01036409, -0.01052257,\n",
      "       -0.01090132, -0.00160266, -0.00464832, -0.00753558, -0.00583657,\n",
      "       -0.00665846, -0.00923196, -0.01064536, -0.01049529, -0.01098685]), 'std_train_score': array([6.42012380e-05, 1.56625324e-04, 5.05464213e-04, 3.02909088e-04,\n",
      "       4.28913563e-04, 5.39425936e-04, 3.46940713e-04, 3.54232686e-04,\n",
      "       3.67683815e-04, 6.42012380e-05, 3.80638256e-04, 6.89200063e-04,\n",
      "       1.92011280e-04, 2.64654363e-04, 3.25685495e-04, 3.33796124e-04,\n",
      "       4.34358567e-04, 3.58219050e-04, 6.42012380e-05, 1.26037274e-04,\n",
      "       3.20849629e-04, 2.45039444e-04, 2.68100923e-04, 4.92405480e-04,\n",
      "       4.60479284e-04, 3.39626073e-04, 3.78588092e-04, 9.50452787e-04,\n",
      "       8.28956481e-04, 8.93212091e-04, 8.00981028e-04, 8.00979865e-04,\n",
      "       8.91704832e-04, 6.61701610e-04, 6.61701610e-04, 7.06024562e-04,\n",
      "       6.82483465e-04, 5.72382136e-04, 1.08930546e-03, 6.77954532e-04,\n",
      "       9.19623545e-04, 7.59590703e-04, 5.59177905e-04, 7.44278346e-04,\n",
      "       3.92791548e-04, 7.57229048e-04, 6.25614388e-04, 4.74947523e-04,\n",
      "       8.04790583e-04, 7.17967334e-04, 8.53572649e-04, 4.96033645e-04,\n",
      "       5.21415427e-04, 6.82486807e-04, 1.00215526e-03, 8.60090302e-04,\n",
      "       1.09732981e-03, 5.52397031e-04, 6.27725367e-04, 9.21945706e-04,\n",
      "       5.65825082e-04, 5.57710014e-04, 5.86104758e-04, 9.54293234e-04,\n",
      "       7.98703104e-04, 8.33180209e-04, 5.67122244e-04, 7.54929634e-04,\n",
      "       7.43729150e-04, 8.38975571e-04, 7.05951716e-04, 6.38684789e-04,\n",
      "       9.16190384e-04, 7.70032689e-04, 5.67960466e-04, 1.55918087e-03,\n",
      "       7.94866247e-04, 1.06654765e-03, 4.17512726e-04, 6.64703145e-04,\n",
      "       1.27385012e-03, 6.15592532e-04, 4.92816600e-04, 7.59211935e-04,\n",
      "       6.87635069e-04, 7.78748818e-04, 7.39563509e-04, 4.05685537e-04,\n",
      "       4.10769277e-04, 4.42594795e-04, 7.70014741e-04, 1.06213506e-03,\n",
      "       3.66999025e-04, 6.53955940e-04, 6.05388227e-04, 6.32939524e-04,\n",
      "       3.55617616e-04, 7.03004480e-04, 4.72428417e-04, 8.97207832e-04,\n",
      "       7.88501861e-04, 1.02599086e-03, 5.15138187e-04, 5.18513389e-04,\n",
      "       2.52447658e-04, 3.68119366e-04, 2.72909733e-04, 7.38073057e-05,\n",
      "       3.32800301e-04, 3.86781018e-04, 4.94322097e-04, 4.13674418e-04,\n",
      "       5.73067703e-04, 5.63610680e-04, 3.26140514e-04, 3.20184030e-04,\n",
      "       3.53060616e-04, 2.36977669e-04, 3.14004666e-04, 7.57599239e-04,\n",
      "       3.14809079e-04, 4.28051572e-04, 4.18496449e-04, 4.91873739e-04,\n",
      "       3.66665567e-04, 5.27843493e-04, 6.63337792e-04, 5.58155640e-04,\n",
      "       4.75739140e-04, 4.28013701e-04, 3.28310382e-04, 5.38973232e-04,\n",
      "       4.42618314e-04, 3.93333421e-04, 3.62729351e-04])}\n"
     ]
    }
   ],
   "source": [
    "# Access the full results\n",
    "cv_results = grid_CV.cv_results_\n",
    "print(cv_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}\n"
     ]
    }
   ],
   "source": [
    "# Right now (temporary) we will choose this hyperparameters as the best one:\n",
    "print(best_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mi_score</th>\n",
       "      <th>sign_fscore</th>\n",
       "      <th>sign_fscore_0_1</th>\n",
       "      <th>corr</th>\n",
       "      <th>EN_coef</th>\n",
       "      <th>boruta_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>etr_y_past</th>\n",
       "      <td>1.009402</td>\n",
       "      <td>1.304040e-84</td>\n",
       "      <td>1</td>\n",
       "      <td>0.520405</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>etr_y_ma</th>\n",
       "      <td>0.825650</td>\n",
       "      <td>2.473770e-125</td>\n",
       "      <td>1</td>\n",
       "      <td>0.526871</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>txt</th>\n",
       "      <td>0.633067</td>\n",
       "      <td>5.246456e-13</td>\n",
       "      <td>1</td>\n",
       "      <td>0.368732</td>\n",
       "      <td>1.466269e-05</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>diff</th>\n",
       "      <td>0.632640</td>\n",
       "      <td>2.257712e-02</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.291716</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ni</th>\n",
       "      <td>0.613297</td>\n",
       "      <td>1.747230e-09</td>\n",
       "      <td>1</td>\n",
       "      <td>0.263458</td>\n",
       "      <td>-3.442000e-07</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mi_score    sign_fscore  sign_fscore_0_1      corr       EN_coef  \\\n",
       "etr_y_past  1.009402   1.304040e-84                1  0.520405           NaN   \n",
       "etr_y_ma    0.825650  2.473770e-125                1  0.526871           NaN   \n",
       "txt         0.633067   5.246456e-13                1  0.368732  1.466269e-05   \n",
       "diff        0.632640   2.257712e-02                1 -0.291716           NaN   \n",
       "ni          0.613297   1.747230e-09                1  0.263458 -3.442000e-07   \n",
       "\n",
       "            boruta_rank  \n",
       "etr_y_past            1  \n",
       "etr_y_ma              1  \n",
       "txt                   1  \n",
       "diff                  1  \n",
       "ni                    7  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature ranking\n",
    "fr.sort_values(\"mi_score\", ascending=False, inplace=True)\n",
    "fr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "br_features = fr[fr.boruta_rank.isin([1, 2, 3])].index.tolist()\n",
    "mi_features = fr.iloc[0:20].index.tolist()\n",
    "mi_features_25 = fr.iloc[0:25].index.tolist()\n",
    "mi_features_35 = fr.iloc[0:35].index.tolist()\n",
    "mi_features_50 = fr.iloc[0:50].index.tolist()\n",
    "fr[\"corr_abs\"] = np.abs(fr[\"corr\"])\n",
    "fr.sort_values(\"corr_abs\", ascending=False, inplace=True)\n",
    "corr_features = fr.iloc[0:20].index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating two additional benchmark sets of variables:\n",
    "benchmark = [\n",
    "    \"rok\",\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"capex2_scaled\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"y_e_p_polity\",\n",
    "    \"y_BR_Democracy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"sektor_consumer discretionary\",\n",
    "    \"sektor_consumer staples\",\n",
    "    \"sektor_energy\",\n",
    "    \"sektor_health care\",\n",
    "    \"sektor_industrials\",\n",
    "    \"sektor_materials\",\n",
    "    \"sektor_real estate\",\n",
    "    \"sektor_technology\",\n",
    "    \"sektor_utilities\",\n",
    "    \"gielda_2\",\n",
    "    \"gielda_3\",\n",
    "    \"gielda_4\",\n",
    "    \"gielda_5\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    \"max_depth\": [None, 5, 10, 15, 20],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": [1, 2, 4],\n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "benchmark2 = [\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Forward elimination\n",
    "forward_elimination = [\n",
    "    \"rok\",\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"capex2_scaled\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"y_e_p_polity\",\n",
    "    \"y_BR_Democracy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"sektor_consumer discretionary\",\n",
    "    \"sektor_consumer staples\",\n",
    "    \"sektor_energy\",\n",
    "    \"sektor_health care\",\n",
    "    \"sektor_industrials\",\n",
    "    \"sektor_materials\",\n",
    "    \"sektor_real estate\",\n",
    "    \"sektor_technology\",\n",
    "    \"sektor_utilities\",\n",
    "    \"gielda_2\",\n",
    "    \"gielda_3\",\n",
    "    \"gielda_4\",\n",
    "    \"gielda_5\",\n",
    "    \"ta_log\",\n",
    "    \"txt_cat_(-63.011, -34.811]\",\n",
    "    \"txt_cat_(-34.811, 0.488]\",\n",
    "    \"txt_cat_(0.488, 24.415]\",\n",
    "    \"txt_cat_(24.415, 25.05]\",\n",
    "    \"txt_cat_(25.05, 308.55]\",\n",
    "    \"txt_cat_(308.55, 327.531]\",\n",
    "    \"txt_cat_(327.531, inf]\",\n",
    "    \"pi_cat_(-8975.0, -1.523]\",\n",
    "    \"pi_cat_(-1.523, 157.119]\",\n",
    "    \"pi_cat_(157.119, 465.9]\",\n",
    "    \"pi_cat_(465.9, 7875.5]\",\n",
    "    \"pi_cat_(7875.5, 8108.5]\",\n",
    "    \"pi_cat_(8108.5, inf]\",\n",
    "    \"str_cat_(0.0875, 0.192]\",\n",
    "    \"str_cat_(0.192, 0.28]\",\n",
    "    \"str_cat_(0.28, inf]\",\n",
    "    \"xrd_exists\",\n",
    "    \"ni_profit\",\n",
    "    \"ni_profit_20000\",\n",
    "    \"ppent_sqrt\",\n",
    "    \"intant_sqrt\",\n",
    "    \"dlc_cat_(42.262, 176.129]\",\n",
    "    \"dlc_cat_(176.129, 200.9]\",\n",
    "    \"dlc_cat_(200.9, inf]\",\n",
    "    \"dltt_cat_(39.38, 327.85]\",\n",
    "    \"dltt_cat_(327.85, 876.617]\",\n",
    "    \"dltt_cat_(876.617, inf]\",\n",
    "    \"capex_cat_(7.447, 79.55]\",\n",
    "    \"capex_cat_(79.55, 5451.0]\",\n",
    "    \"capex_cat_(5451.0, inf]\",\n",
    "    \"revenue_cat_(0.174, 1248.817]\",\n",
    "    \"revenue_cat_(1248.817, 4233.587]\",\n",
    "    \"revenue_cat_(4233.587, inf]\",\n",
    "    \"cce_cat_(5.619, 63.321]\",\n",
    "    \"cce_cat_(63.321, inf]\",\n",
    "    \"adv_cat_(0.3, 874.5]\",\n",
    "    \"adv_cat_(874.5, inf]\",\n",
    "    \"diff_positive\",\n",
    "    \"roa_clip\",\n",
    "    \"lev_sqrt\",\n",
    "    \"intan_pow2\",\n",
    "    \"rd_sqrt\",\n",
    "    \"ppe_clip\",\n",
    "    \"cash_holdings_sqrt\",\n",
    "    \"adv_expenditure_positive\",\n",
    "    \"diff_dta\",\n",
    "    \"cfc_dta\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]\n",
    "forward_elimination.remove(\"ta_log\")\n",
    "forward_elimination.remove(\"ppent_sqrt\")\n",
    "forward_elimination.remove(\"intant_sqrt\")\n",
    "forward_elimination.remove(\"roa\")\n",
    "forward_elimination.remove(\"lev\")\n",
    "forward_elimination.remove(\"intan\")\n",
    "forward_elimination.remove(\"rd_sqrt\")\n",
    "forward_elimination.remove(\"ppe\")\n",
    "forward_elimination.remove(\"cash_holdings_sqrt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "candidates_withoud_discr = [i for i in forward_elimination if \"]\" not in i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 5,\n",
       " 'max_features': 'sqrt',\n",
       " 'min_samples_leaf': 1,\n",
       " 'min_samples_split': 5}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_CV.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = DecisionTreeRegressor(**grid_CV.best_params_)\n",
    "\n",
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=(15),\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['intant', 'adv', 'y_e_p_polity', 'WB_GDPgrowth', 'WB_GDPpc',\n",
      "       'WB_Inflation', 'rr_per_country', 'sektor_consumer staples',\n",
      "       'sektor_industrials', 'sektor_real estate', 'sektor_technology',\n",
      "       'ni_profit_20000', 'etr_y_past', 'etr_y_ma', 'sale_past'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "sffit = sf.fit(\n",
    "    df.loc[:, candidates_withoud_discr].values, df.loc[:, \"etr\"].values.ravel()\n",
    ")\n",
    "\n",
    "sf_features = df.loc[:, candidates_withoud_discr].columns[sffit.support_]\n",
    "\n",
    "print(sf_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = DecisionTreeRegressor(**grid_CV.best_params_)\n",
    "\n",
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=(10),\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'y_e_p_polity', 'WB_GDPpc', 'sektor_consumer discretionary',\n",
       "       'txt_cat_(0.488, 24.415]', 'pi_cat_(7875.5, 8108.5]',\n",
       "       'str_cat_(0.0875, 0.192]', 'capex_cat_(5451.0, inf]', 'diff_dta',\n",
       "       'etr_y_past'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sffit = sf.fit(\n",
    "    df.loc[:, forward_elimination].values, df.loc[:, \"etr\"].values.ravel()\n",
    ")\n",
    "\n",
    "sf_features2 = df.loc[:, forward_elimination].columns[sffit.support_]\n",
    "\n",
    "sf_features2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf_one_more = [\n",
    "    'rok', \n",
    "    'cfc', \n",
    "    'txt_cat_(0.488, 24.415]', \n",
    "    'pi_cat_(465.9, 7875.5]',\n",
    "    'pi_cat_(8108.5, inf]', \n",
    "    'str_cat_(0.192, 0.28]',\n",
    "    'dltt_cat_(876.617, inf]', \n",
    "    'adv_cat_(0.3, 874.5]', \n",
    "    'etr_y_ma',\n",
    "    'ppe_past'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = DecisionTreeRegressor(**grid_CV.best_params_)\n",
    "\n",
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=(5),\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'pi_cat_(8108.5, inf]', 'str_cat_(0.192, 0.28]',\n",
       "       'adv_cat_(0.3, 874.5]', 'etr_y_ma'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sffit = sf.fit(df.loc[:, sf_one_more].values, df.loc[:, \"etr\"].values.ravel())\n",
    "\n",
    "sf_features3 = df.loc[:, sf_one_more].columns[sffit.support_]\n",
    "\n",
    "sf_features3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hyperparameters Tunning for each group of variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    \"max_depth\": [None, 5, 10, 15, 20],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": [1, 2, 4],\n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"],\n",
    "}\n",
    "\n",
    "mse = make_scorer(mean_squared_error, greater_is_better=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_proc(var):\n",
    "    model = DecisionTreeRegressor()\n",
    "    grid_CV = GridSearchCV(\n",
    "        model, param, cv=5, scoring=mse, return_train_score=True, n_jobs=-1\n",
    "    )\n",
    "    grid_CV.fit(df.loc[:, var].values, df.loc[:, \"etr\"].values.ravel())\n",
    "    print(grid_CV.best_params_)\n",
    "    print(grid_CV.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5}\n",
      "-0.02156730749916607\n"
     ]
    }
   ],
   "source": [
    "cv_proc(benchmark)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5}\n",
      "-0.022059378918544977\n"
     ]
    }
   ],
   "source": [
    "cv_proc(benchmark2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "-0.021914459209412727\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}\n",
      "-0.02210318493800648\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2}\n",
      "-0.022137314205407092\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "-0.020990002202181522\n"
     ]
    }
   ],
   "source": [
    "cv_proc(br_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "-0.02146164370160841\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "-0.02140368711964956\n"
     ]
    }
   ],
   "source": [
    "cv_proc(corr_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10}\n",
      "-0.02075306122641788\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "-0.020079508184476312\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "-0.02028598370494811\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Final models comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort_values(by=\"rok\").reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "def proper_CV(x, y, model, display_res=False):\n",
    "    train_score = list()\n",
    "    valid_score = list()\n",
    "    train_indexes = [0, 1452]\n",
    "    valid_indexes = [1452, 1815]\n",
    "    for i in range(0, 6):\n",
    "        train_x = x[x.index.isin(range(train_indexes[0], train_indexes[1]))]\n",
    "        train_y = y[y.index.isin(range(train_indexes[0], train_indexes[1]))]\n",
    "        valid_x = x[x.index.isin(range(valid_indexes[0], valid_indexes[1]))]\n",
    "        valid_y = y[y.index.isin(range(valid_indexes[0], valid_indexes[1]))]\n",
    "\n",
    "        model.fit(train_x.values, train_y.values.ravel())\n",
    "\n",
    "        pred_y_train = model.predict(train_x.values)\n",
    "        rmse = np.sqrt(mean_squared_error(train_y, pred_y_train))\n",
    "        train_score.append(rmse)\n",
    "\n",
    "        pred_y_val = model.predict(valid_x.values)\n",
    "        rmse = np.sqrt(mean_squared_error(valid_y, pred_y_val))\n",
    "        valid_score.append(rmse)\n",
    "\n",
    "        train_indexes = [0, valid_indexes[1]]\n",
    "        valid_indexes = [train_indexes[1], valid_indexes[1] + 363]\n",
    "\n",
    "    if display_res == True:\n",
    "        view = pd.DataFrame([train_score, valid_score]).T.rename(\n",
    "            columns={0: \"cv_train\", 1: \"cv_val\"}\n",
    "        )\n",
    "        display(view)\n",
    "        return train_score, valid_score, view\n",
    "    else:\n",
    "        return train_score, valid_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "hp = [\n",
    "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5},\n",
    "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5},\n",
    "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10},\n",
    "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2},\n",
    "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2},\n",
    "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10},\n",
    "{'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10},\n",
    "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10},\n",
    "{'max_depth': 5, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10},\n",
    "{'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10},\n",
    "{'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10},\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.131908</td>\n",
       "      <td>0.150388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.128872</td>\n",
       "      <td>0.146382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.133823</td>\n",
       "      <td>0.154904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.130055</td>\n",
       "      <td>0.152610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.134062</td>\n",
       "      <td>0.139657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.137623</td>\n",
       "      <td>0.147233</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.131908  0.150388\n",
       "1  0.128872  0.146382\n",
       "2  0.133823  0.154904\n",
       "3  0.130055  0.152610\n",
       "4  0.134062  0.139657\n",
       "5  0.137623  0.147233"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[0])\n",
    "var = benchmark\n",
    "cv_output0 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.129655</td>\n",
       "      <td>0.149905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.131438</td>\n",
       "      <td>0.142111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.133549</td>\n",
       "      <td>0.153194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.138385</td>\n",
       "      <td>0.151916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.135632</td>\n",
       "      <td>0.130939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.136300</td>\n",
       "      <td>0.136535</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.129655  0.149905\n",
       "1  0.131438  0.142111\n",
       "2  0.133549  0.153194\n",
       "3  0.138385  0.151916\n",
       "4  0.135632  0.130939\n",
       "5  0.136300  0.136535"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[1])\n",
    "var = benchmark2\n",
    "cv_output1 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.126587</td>\n",
       "      <td>0.150841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.126100</td>\n",
       "      <td>0.137786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.123488</td>\n",
       "      <td>0.163627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.129012</td>\n",
       "      <td>0.155394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.131241</td>\n",
       "      <td>0.136144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.131782</td>\n",
       "      <td>0.136893</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.126587  0.150841\n",
       "1  0.126100  0.137786\n",
       "2  0.123488  0.163627\n",
       "3  0.129012  0.155394\n",
       "4  0.131241  0.136144\n",
       "5  0.131782  0.136893"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[2])\n",
    "var = br_features\n",
    "cv_output2 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.137960</td>\n",
       "      <td>0.155636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.128846</td>\n",
       "      <td>0.143088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.131270</td>\n",
       "      <td>0.150514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.130765</td>\n",
       "      <td>0.162522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.130059</td>\n",
       "      <td>0.143946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.132479</td>\n",
       "      <td>0.146429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.137960  0.155636\n",
       "1  0.128846  0.143088\n",
       "2  0.131270  0.150514\n",
       "3  0.130765  0.162522\n",
       "4  0.130059  0.143946\n",
       "5  0.132479  0.146429"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[3])\n",
    "var = mi_features\n",
    "cv_output3 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.139110</td>\n",
       "      <td>0.142560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.132317</td>\n",
       "      <td>0.137694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.131908</td>\n",
       "      <td>0.159603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.131838</td>\n",
       "      <td>0.143071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.133632</td>\n",
       "      <td>0.130649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.133404</td>\n",
       "      <td>0.142581</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.139110  0.142560\n",
       "1  0.132317  0.137694\n",
       "2  0.131908  0.159603\n",
       "3  0.131838  0.143071\n",
       "4  0.133632  0.130649\n",
       "5  0.133404  0.142581"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[4])\n",
    "var = corr_features\n",
    "cv_output4 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.141044</td>\n",
       "      <td>0.141810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.133139</td>\n",
       "      <td>0.136733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.132875</td>\n",
       "      <td>0.154946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.136300</td>\n",
       "      <td>0.146098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.137651</td>\n",
       "      <td>0.149342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.138568</td>\n",
       "      <td>0.134895</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.141044  0.141810\n",
       "1  0.133139  0.136733\n",
       "2  0.132875  0.154946\n",
       "3  0.136300  0.146098\n",
       "4  0.137651  0.149342\n",
       "5  0.138568  0.134895"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[5])\n",
    "var = sf_features\n",
    "cv_output5 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.127880</td>\n",
       "      <td>0.143306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.129065</td>\n",
       "      <td>0.138939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.128832</td>\n",
       "      <td>0.157145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.132375</td>\n",
       "      <td>0.147543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.134232</td>\n",
       "      <td>0.127828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.132661</td>\n",
       "      <td>0.143597</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.127880  0.143306\n",
       "1  0.129065  0.138939\n",
       "2  0.128832  0.157145\n",
       "3  0.132375  0.147543\n",
       "4  0.134232  0.127828\n",
       "5  0.132661  0.143597"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[6])\n",
    "var = sf_features2\n",
    "cv_output6 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.135890</td>\n",
       "      <td>0.160455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.129836</td>\n",
       "      <td>0.135739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.135765</td>\n",
       "      <td>0.154066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.136319</td>\n",
       "      <td>0.147127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.143364</td>\n",
       "      <td>0.132629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.135338</td>\n",
       "      <td>0.134670</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.135890  0.160455\n",
       "1  0.129836  0.135739\n",
       "2  0.135765  0.154066\n",
       "3  0.136319  0.147127\n",
       "4  0.143364  0.132629\n",
       "5  0.135338  0.134670"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[7])\n",
    "var = sf_features3\n",
    "cv_output7 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.127106</td>\n",
       "      <td>0.149998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.132379</td>\n",
       "      <td>0.145440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.128965</td>\n",
       "      <td>0.165134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.136269</td>\n",
       "      <td>0.148789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.136247</td>\n",
       "      <td>0.135186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.135077</td>\n",
       "      <td>0.142592</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.127106  0.149998\n",
       "1  0.132379  0.145440\n",
       "2  0.128965  0.165134\n",
       "3  0.136269  0.148789\n",
       "4  0.136247  0.135186\n",
       "5  0.135077  0.142592"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[8])\n",
    "var = mi_features_25\n",
    "cv_output8 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.115583</td>\n",
       "      <td>0.171699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.120059</td>\n",
       "      <td>0.148289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.118023</td>\n",
       "      <td>0.177080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.122318</td>\n",
       "      <td>0.142885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.122851</td>\n",
       "      <td>0.130068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.125900</td>\n",
       "      <td>0.150695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.115583  0.171699\n",
       "1  0.120059  0.148289\n",
       "2  0.118023  0.177080\n",
       "3  0.122318  0.142885\n",
       "4  0.122851  0.130068\n",
       "5  0.125900  0.150695"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[9])\n",
    "var = mi_features_35\n",
    "cv_output9 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.127049</td>\n",
       "      <td>0.156941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.132061</td>\n",
       "      <td>0.147437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.129691</td>\n",
       "      <td>0.156891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.131554</td>\n",
       "      <td>0.150111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.134636</td>\n",
       "      <td>0.140419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.135664</td>\n",
       "      <td>0.139682</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.127049  0.156941\n",
       "1  0.132061  0.147437\n",
       "2  0.129691  0.156891\n",
       "3  0.131554  0.150111\n",
       "4  0.134636  0.140419\n",
       "5  0.135664  0.139682"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[10])\n",
    "var = mi_features_50\n",
    "cv_output10 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_mean</th>\n",
       "      <th>test_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.132724</td>\n",
       "      <td>0.148529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.134160</td>\n",
       "      <td>0.144100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.128035</td>\n",
       "      <td>0.146781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.131897</td>\n",
       "      <td>0.150356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.133701</td>\n",
       "      <td>0.142693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.136596</td>\n",
       "      <td>0.143971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.130841</td>\n",
       "      <td>0.143059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.136085</td>\n",
       "      <td>0.144114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.132674</td>\n",
       "      <td>0.147856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.120789</td>\n",
       "      <td>0.153453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.131776</td>\n",
       "      <td>0.148580</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    train_mean  test_mean\n",
       "0     0.132724   0.148529\n",
       "1     0.134160   0.144100\n",
       "2     0.128035   0.146781\n",
       "3     0.131897   0.150356\n",
       "4     0.133701   0.142693\n",
       "5     0.136596   0.143971\n",
       "6     0.130841   0.143059\n",
       "7     0.136085   0.144114\n",
       "8     0.132674   0.147856\n",
       "9     0.120789   0.153453\n",
       "10    0.131776   0.148580"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(\n",
    "    [\n",
    "        cv_output0[2].mean().tolist(),\n",
    "        cv_output1[2].mean().tolist(),\n",
    "        cv_output2[2].mean().tolist(),\n",
    "        cv_output3[2].mean().tolist(),\n",
    "        cv_output4[2].mean().tolist(),\n",
    "        cv_output5[2].mean().tolist(),\n",
    "        cv_output6[2].mean().tolist(),\n",
    "        cv_output7[2].mean().tolist(),\n",
    "        cv_output8[2].mean().tolist(),\n",
    "        cv_output9[2].mean().tolist(),\n",
    "        cv_output10[2].mean().tolist(),\n",
    "    ],\n",
    "    columns=[\"train_mean\", \"test_mean\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_std</th>\n",
       "      <th>test_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.003150</td>\n",
       "      <td>0.005399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.003246</td>\n",
       "      <td>0.009076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.003218</td>\n",
       "      <td>0.011544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.003208</td>\n",
       "      <td>0.007553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.002755</td>\n",
       "      <td>0.009552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.003183</td>\n",
       "      <td>0.007658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.002574</td>\n",
       "      <td>0.009673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.004308</td>\n",
       "      <td>0.011545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.003907</td>\n",
       "      <td>0.009980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.003688</td>\n",
       "      <td>0.017799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.003166</td>\n",
       "      <td>0.007595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    train_std  test_std\n",
       "0    0.003150  0.005399\n",
       "1    0.003246  0.009076\n",
       "2    0.003218  0.011544\n",
       "3    0.003208  0.007553\n",
       "4    0.002755  0.009552\n",
       "5    0.003183  0.007658\n",
       "6    0.002574  0.009673\n",
       "7    0.004308  0.011545\n",
       "8    0.003907  0.009980\n",
       "9    0.003688  0.017799\n",
       "10   0.003166  0.007595"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(\n",
    "    [\n",
    "        cv_output0[2].std().tolist(),\n",
    "        cv_output1[2].std().tolist(),\n",
    "        cv_output2[2].std().tolist(),\n",
    "        cv_output3[2].std().tolist(),\n",
    "        cv_output4[2].std().tolist(),\n",
    "        cv_output5[2].std().tolist(),\n",
    "        cv_output6[2].std().tolist(),\n",
    "        cv_output7[2].std().tolist(),\n",
    "        cv_output8[2].std().tolist(),\n",
    "        cv_output9[2].std().tolist(),\n",
    "        cv_output10[2].std().tolist(),\n",
    "    ],\n",
    "    columns=[\"train_std\", \"test_std\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# 3rd model \n",
    "print(corr_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fitting the final model and saving it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(max_depth=5, max_features='log2', min_samples_leaf=4)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = DecisionTreeRegressor(**hp[4])\n",
    "model.fit(df.loc[:, corr_features].values, df.loc[:, \"etr\"].values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \".../models/dt.sav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(model, open(filename, \"wb\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_output_data_path = \".../data/output\"\n",
    "\n",
    "df = pd.read_csv(f\"{preprocessed_output_data_path}/train_fe.csv\", index_col=0)\n",
    "\n",
    "fr = pd.read_excel(f\"{preprocessed_output_data_path}/feature_ranking.xlsx\", index_col=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can omit that part in the case of Random Forest\n",
    "# (as stated in the exercise description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['etr_y_past', 'etr_y_ma', 'txt', 'diff', 'ni', 'pi', 'intant', 'intant_sqrt', 'ta', 'revenue']\n"
     ]
    }
   ],
   "source": [
    "var = fr.mi_score.sort_values(ascending=False).index.tolist()[0:10]\n",
    "print(var)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63.190189111918315"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape[0] ** (0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the parameter grid for Random Forest\n",
    "param = {\n",
    "    \"n_estimators\": [50], # limited it because the code was not loading \n",
    "    \"max_depth\": [None, 10, 20],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": [1, 2, 4],\n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the mean squared error scorer\n",
    "mse = make_scorer(mean_squared_error, greater_is_better=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the RandomForestRegressor model\n",
    "model = RandomForestRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the GridSearchCV object for Random Forest\n",
    "grid_CV = GridSearchCV(\n",
    "    model, param, cv=5, scoring=mse, return_train_score=True, n_jobs=-1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n",
       "             param_grid={'max_depth': [None, 10, 20],\n",
       "                         'max_features': ['auto', 'sqrt', 'log2'],\n",
       "                         'min_samples_leaf': [1, 2, 4],\n",
       "                         'min_samples_split': [2, 5, 10],\n",
       "                         'n_estimators': [50]},\n",
       "             return_train_score=True,\n",
       "             scoring=make_scorer(mean_squared_error, greater_is_better=False))"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the grid search to the data\n",
    "grid_CV.fit(df.loc[:, var].values, df.loc[:, \"etr\"].values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters for Random Forest: {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}\n"
     ]
    }
   ],
   "source": [
    "# Get the best parameters for Random Forest\n",
    "best_params = grid_CV.best_params_\n",
    "print(\"Best Parameters for Random Forest:\", best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV Results for Random Forest: {'mean_fit_time': array([2.24842749, 2.02739725, 1.69246273, 1.64854403, 1.66772375,\n",
      "       1.59835682, 1.36808114, 1.42938199, 1.37483125, 0.6953217 ,\n",
      "       0.66203136, 0.62166166, 0.57776704, 0.55795364, 0.53054218,\n",
      "       0.49882445, 0.48709068, 0.49068074, 0.67578964, 0.60885773,\n",
      "       0.57646985, 0.56650643, 0.56858397, 0.55454874, 0.5032649 ,\n",
      "       0.49937935, 0.49522734, 1.14716043, 1.1063374 , 1.09174819,\n",
      "       1.07916069, 1.1167407 , 1.14815969, 1.17879682, 1.31080556,\n",
      "       1.23926091, 0.49793944, 0.42194834, 0.42736516, 0.42495494,\n",
      "       0.40342474, 0.41204495, 0.38638897, 0.39490294, 0.38804355,\n",
      "       0.42088442, 0.42836199, 0.43062973, 0.4255579 , 0.42812276,\n",
      "       0.40098667, 0.38921189, 0.40310731, 0.41500974, 1.86473274,\n",
      "       1.68563209, 1.58963084, 1.55398483, 1.55924597, 1.499755  ,\n",
      "       1.37906466, 1.39618502, 1.35427585, 0.61996498, 0.56886773,\n",
      "       0.54208212, 0.55304079, 0.55502448, 0.51955819, 0.50710144,\n",
      "       0.52483711, 0.54972959, 0.6456562 , 0.69917374, 0.58436084,\n",
      "       0.57019134, 0.65313506, 0.54243355, 0.53203363, 0.53125453,\n",
      "       0.49767871]), 'std_fit_time': array([0.10078649, 0.18457553, 0.06402469, 0.09801725, 0.06568447,\n",
      "       0.09639732, 0.06469852, 0.07110706, 0.09009989, 0.01480348,\n",
      "       0.09187633, 0.04340482, 0.01797715, 0.01931705, 0.0182432 ,\n",
      "       0.0295699 , 0.02125929, 0.02808579, 0.01981182, 0.03356158,\n",
      "       0.01976917, 0.01995924, 0.04227319, 0.02470839, 0.02988586,\n",
      "       0.01844741, 0.02100332, 0.05783274, 0.06233235, 0.03237018,\n",
      "       0.03772779, 0.04519448, 0.08659364, 0.08419474, 0.1123255 ,\n",
      "       0.10494235, 0.06539712, 0.01366327, 0.01951864, 0.02010527,\n",
      "       0.00390607, 0.02361089, 0.00778717, 0.01189924, 0.00494243,\n",
      "       0.03536847, 0.01665927, 0.02829532, 0.00963903, 0.01212421,\n",
      "       0.0048913 , 0.00420058, 0.00789852, 0.03597222, 0.07715185,\n",
      "       0.0501862 , 0.05570835, 0.03435451, 0.02876358, 0.03977114,\n",
      "       0.03412533, 0.02816247, 0.0210242 , 0.01854974, 0.01247354,\n",
      "       0.00850517, 0.01399592, 0.02018928, 0.01032965, 0.03746776,\n",
      "       0.05797287, 0.0642403 , 0.08530609, 0.07205033, 0.06276625,\n",
      "       0.0507383 , 0.06408304, 0.05586753, 0.06084858, 0.0557419 ,\n",
      "       0.05073855]), 'mean_score_time': array([0.0290699 , 0.01382837, 0.01283097, 0.01316147, 0.01314793,\n",
      "       0.01244206, 0.01152611, 0.01341777, 0.01154327, 0.02108541,\n",
      "       0.01400852, 0.01598258, 0.01374655, 0.01329155, 0.01208749,\n",
      "       0.01155744, 0.01088448, 0.01251917, 0.01539683, 0.01397066,\n",
      "       0.01383319, 0.01295576, 0.01288996, 0.01224985, 0.01205115,\n",
      "       0.0121592 , 0.01154599, 0.00874348, 0.00862417, 0.00913582,\n",
      "       0.00893655, 0.00902724, 0.0101459 , 0.01073866, 0.01256166,\n",
      "       0.01305294, 0.01088295, 0.00986624, 0.01160979, 0.01270347,\n",
      "       0.0095324 , 0.00928998, 0.01035919, 0.00964208, 0.00976791,\n",
      "       0.01179867, 0.00973706, 0.01226597, 0.00842838, 0.00976253,\n",
      "       0.00895891, 0.01053267, 0.00999312, 0.01016154, 0.01350203,\n",
      "       0.01269889, 0.01208038, 0.01360526, 0.01178699, 0.01383467,\n",
      "       0.01111293, 0.01137466, 0.01088533, 0.0139514 , 0.01276846,\n",
      "       0.01246634, 0.01290879, 0.01185904, 0.01119795, 0.01192327,\n",
      "       0.01348834, 0.01230483, 0.01412101, 0.01429152, 0.01440601,\n",
      "       0.01501398, 0.01667867, 0.01186242, 0.01220932, 0.01134562,\n",
      "       0.00950031]), 'std_score_time': array([0.01154062, 0.00116079, 0.00068198, 0.00066865, 0.001507  ,\n",
      "       0.00193084, 0.00100008, 0.00268709, 0.00063486, 0.00913279,\n",
      "       0.00135556, 0.00421242, 0.00147057, 0.00078988, 0.00068863,\n",
      "       0.00044535, 0.00048815, 0.00044879, 0.0006691 , 0.00176602,\n",
      "       0.00097408, 0.00069846, 0.00046987, 0.00075879, 0.00110031,\n",
      "       0.0008035 , 0.00064609, 0.00039756, 0.00049096, 0.00036446,\n",
      "       0.00079616, 0.00070743, 0.00222423, 0.00418402, 0.00324509,\n",
      "       0.00267756, 0.00174923, 0.00136117, 0.00436395, 0.00572648,\n",
      "       0.00047899, 0.00045514, 0.00128463, 0.00079532, 0.00104264,\n",
      "       0.00372889, 0.00107355, 0.00369384, 0.00226264, 0.00108531,\n",
      "       0.0001631 , 0.0022649 , 0.0006926 , 0.00142411, 0.00079592,\n",
      "       0.00061553, 0.0011692 , 0.00181892, 0.00079621, 0.00275294,\n",
      "       0.00058642, 0.0006455 , 0.00070083, 0.00113356, 0.00193412,\n",
      "       0.00032671, 0.0010468 , 0.00060536, 0.00108947, 0.0005948 ,\n",
      "       0.00355784, 0.0012902 , 0.00090679, 0.00195376, 0.00271439,\n",
      "       0.00330103, 0.00448352, 0.00061722, 0.00187193, 0.00096476,\n",
      "       0.0013631 ]), 'param_max_depth': masked_array(data=[None, None, None, None, None, None, None, None, None,\n",
      "                   None, None, None, None, None, None, None, None, None,\n",
      "                   None, None, None, None, None, None, None, None, None,\n",
      "                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n",
      "                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20,\n",
      "                   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n",
      "                   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_max_features': masked_array(data=['auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'auto', 'auto', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'log2', 'log2', 'log2', 'auto',\n",
      "                   'auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'auto', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'log2', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'log2', 'log2', 'auto', 'auto',\n",
      "                   'auto', 'auto', 'auto', 'auto', 'auto', 'auto', 'auto',\n",
      "                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',\n",
      "                   'sqrt', 'sqrt', 'log2', 'log2', 'log2', 'log2', 'log2',\n",
      "                   'log2', 'log2', 'log2', 'log2'],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_min_samples_leaf': masked_array(data=[1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4, 1, 1, 1, 2, 2, 2, 4, 4, 4,\n",
      "                   1, 1, 1, 2, 2, 2, 4, 4, 4],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_min_samples_split': masked_array(data=[2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5,\n",
      "                   10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10,\n",
      "                   2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5,\n",
      "                   10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10,\n",
      "                   2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10, 2, 5, 10],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_n_estimators': masked_array(data=[50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n",
      "                   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n",
      "                   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n",
      "                   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n",
      "                   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n",
      "                   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': None, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}, {'max_depth': 20, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}], 'split0_test_score': array([-0.01938637, -0.01999381, -0.01945151, -0.01906089, -0.01968329,\n",
      "       -0.01891834, -0.01870057, -0.01890239, -0.01829493, -0.01857972,\n",
      "       -0.01919906, -0.01905355, -0.01826837, -0.01840058, -0.0181135 ,\n",
      "       -0.01774325, -0.01796336, -0.01767347, -0.01907472, -0.01932838,\n",
      "       -0.01860099, -0.01794136, -0.01878226, -0.01844034, -0.01772871,\n",
      "       -0.01826513, -0.01790623, -0.01913714, -0.01925279, -0.01895414,\n",
      "       -0.01877669, -0.01840443, -0.01851774, -0.01779973, -0.01799814,\n",
      "       -0.01783914, -0.01865044, -0.01873549, -0.01778468, -0.01775008,\n",
      "       -0.01829111, -0.01818527, -0.01756169, -0.01725273, -0.01783835,\n",
      "       -0.01828439, -0.01847843, -0.01748528, -0.01769749, -0.0179222 ,\n",
      "       -0.0178459 , -0.01779435, -0.01765732, -0.01753158, -0.02036145,\n",
      "       -0.02024447, -0.01937126, -0.018671  , -0.019278  , -0.01907515,\n",
      "       -0.01834827, -0.01879798, -0.01800965, -0.01900746, -0.01906713,\n",
      "       -0.01854624, -0.01838018, -0.01856223, -0.01758359, -0.01800203,\n",
      "       -0.01795194, -0.01787835, -0.01890012, -0.01872987, -0.01864045,\n",
      "       -0.01881053, -0.01856225, -0.01811273, -0.01796619, -0.01783979,\n",
      "       -0.01768561]), 'split1_test_score': array([-0.02148077, -0.02159093, -0.0211178 , -0.02089663, -0.02079674,\n",
      "       -0.02060369, -0.02002757, -0.01998181, -0.02003605, -0.02028626,\n",
      "       -0.02021074, -0.01996279, -0.01959655, -0.01955627, -0.01955577,\n",
      "       -0.01916854, -0.01953051, -0.01905311, -0.01994766, -0.01951833,\n",
      "       -0.02060883, -0.01996532, -0.01939967, -0.01981769, -0.01923154,\n",
      "       -0.01965821, -0.01922297, -0.02079294, -0.02080181, -0.0202635 ,\n",
      "       -0.02021087, -0.02012797, -0.02000313, -0.01944728, -0.01978722,\n",
      "       -0.01976396, -0.01907641, -0.01884004, -0.01950834, -0.01913095,\n",
      "       -0.0191038 , -0.01884672, -0.01891929, -0.01873087, -0.0187195 ,\n",
      "       -0.0194094 , -0.01919358, -0.01906374, -0.01929875, -0.01923359,\n",
      "       -0.0190687 , -0.01862602, -0.01921341, -0.01916725, -0.02080381,\n",
      "       -0.02133904, -0.02152377, -0.02076475, -0.02085755, -0.02076258,\n",
      "       -0.02005391, -0.02016434, -0.02025543, -0.02007708, -0.02038966,\n",
      "       -0.01978051, -0.01990383, -0.01946678, -0.0192088 , -0.01961297,\n",
      "       -0.01908651, -0.01946289, -0.019724  , -0.01982261, -0.02014771,\n",
      "       -0.0198463 , -0.01972002, -0.01930587, -0.01925558, -0.01947922,\n",
      "       -0.01896838]), 'split2_test_score': array([-0.01905168, -0.01905075, -0.01869383, -0.01905414, -0.01878399,\n",
      "       -0.01911948, -0.01887626, -0.01882314, -0.01900217, -0.0196579 ,\n",
      "       -0.01926836, -0.01865528, -0.01952175, -0.01918401, -0.01922954,\n",
      "       -0.01871277, -0.01852978, -0.01861571, -0.01945375, -0.01874965,\n",
      "       -0.01893648, -0.01875496, -0.01880699, -0.01882588, -0.01899799,\n",
      "       -0.01908877, -0.01864537, -0.01854975, -0.01904779, -0.01877973,\n",
      "       -0.01851752, -0.01900836, -0.01865813, -0.01908923, -0.01849211,\n",
      "       -0.01857284, -0.01920971, -0.01931938, -0.01850644, -0.01880405,\n",
      "       -0.01910778, -0.01905324, -0.01864487, -0.01851166, -0.01874424,\n",
      "       -0.01910998, -0.01884676, -0.01910698, -0.01882351, -0.01926053,\n",
      "       -0.01871985, -0.01862189, -0.0187781 , -0.01855013, -0.01943279,\n",
      "       -0.01914446, -0.01929974, -0.019121  , -0.01897262, -0.01887298,\n",
      "       -0.01887226, -0.01856015, -0.01873752, -0.01986521, -0.01901885,\n",
      "       -0.0188749 , -0.01901396, -0.01939328, -0.01917422, -0.01868653,\n",
      "       -0.01902273, -0.01913087, -0.01949747, -0.01943056, -0.01858535,\n",
      "       -0.01936561, -0.01901094, -0.01880327, -0.01897099, -0.01911845,\n",
      "       -0.01877191]), 'split3_test_score': array([-0.02635318, -0.02632617, -0.02615781, -0.02583151, -0.025304  ,\n",
      "       -0.02572012, -0.02482196, -0.02535152, -0.02504959, -0.02563992,\n",
      "       -0.02520637, -0.02476164, -0.02490289, -0.02493747, -0.02467166,\n",
      "       -0.02456851, -0.0244957 , -0.02461781, -0.02518206, -0.02488452,\n",
      "       -0.02431634, -0.0253002 , -0.02533595, -0.02482036, -0.02442783,\n",
      "       -0.02451774, -0.02485026, -0.02573942, -0.0258839 , -0.02565338,\n",
      "       -0.02517567, -0.0250549 , -0.02509502, -0.02465136, -0.02479142,\n",
      "       -0.02497702, -0.0250101 , -0.02483459, -0.0250681 , -0.02445189,\n",
      "       -0.02407234, -0.02497227, -0.02414166, -0.02437729, -0.02449581,\n",
      "       -0.02446441, -0.02500191, -0.02494567, -0.02502548, -0.02478031,\n",
      "       -0.02448037, -0.02429534, -0.02407593, -0.0246164 , -0.02664443,\n",
      "       -0.02633627, -0.02574746, -0.02580563, -0.02583735, -0.02599108,\n",
      "       -0.0251683 , -0.02527312, -0.02490546, -0.02616005, -0.02491243,\n",
      "       -0.0249263 , -0.0245605 , -0.02440097, -0.0249345 , -0.02411734,\n",
      "       -0.02394691, -0.02424809, -0.0249288 , -0.02531771, -0.02488332,\n",
      "       -0.02477012, -0.02500885, -0.02444678, -0.02502975, -0.02450377,\n",
      "       -0.02465813]), 'split4_test_score': array([-0.02270773, -0.02311834, -0.02318249, -0.02309167, -0.02342518,\n",
      "       -0.02259222, -0.02259985, -0.02229578, -0.02309977, -0.02266551,\n",
      "       -0.0234261 , -0.02232833, -0.02296335, -0.02310388, -0.0226872 ,\n",
      "       -0.0227846 , -0.02264093, -0.02270885, -0.02304045, -0.02304277,\n",
      "       -0.02261992, -0.02302589, -0.02280066, -0.0227091 , -0.02268192,\n",
      "       -0.02235979, -0.02294996, -0.02271416, -0.02273485, -0.02227217,\n",
      "       -0.02280762, -0.02268508, -0.02250019, -0.02227193, -0.02254741,\n",
      "       -0.02238462, -0.02274407, -0.02238367, -0.02249241, -0.02226065,\n",
      "       -0.0227191 , -0.02207653, -0.02245754, -0.02232817, -0.02239503,\n",
      "       -0.02230346, -0.02221337, -0.02257687, -0.02268637, -0.02245242,\n",
      "       -0.02236433, -0.02269942, -0.022442  , -0.02234064, -0.02396231,\n",
      "       -0.02328634, -0.02289912, -0.0228414 , -0.02350188, -0.02274073,\n",
      "       -0.02275921, -0.02264826, -0.02272715, -0.02271549, -0.02329845,\n",
      "       -0.02289237, -0.02318419, -0.02287767, -0.02224782, -0.0224417 ,\n",
      "       -0.02271152, -0.02265497, -0.02305855, -0.02290029, -0.02318192,\n",
      "       -0.02324209, -0.02307051, -0.023113  , -0.02311652, -0.02251363,\n",
      "       -0.02232106]), 'mean_test_score': array([-0.02179595, -0.022016  , -0.02172069, -0.02158697, -0.02159864,\n",
      "       -0.02139077, -0.02100524, -0.02107093, -0.0210965 , -0.02136586,\n",
      "       -0.02146212, -0.02095232, -0.02105058, -0.02103645, -0.02085154,\n",
      "       -0.02059554, -0.02063206, -0.02053379, -0.02133973, -0.02110473,\n",
      "       -0.02101651, -0.02099755, -0.0210251 , -0.02092267, -0.0206136 ,\n",
      "       -0.02077793, -0.02071496, -0.02138668, -0.02154423, -0.02118458,\n",
      "       -0.02109767, -0.02105614, -0.02095484, -0.02065191, -0.02072326,\n",
      "       -0.02070751, -0.02093815, -0.02082263, -0.020672  , -0.02047952,\n",
      "       -0.02065883, -0.02062681, -0.02034501, -0.02024014, -0.02043859,\n",
      "       -0.02071433, -0.02074681, -0.02063571, -0.02070632, -0.02072981,\n",
      "       -0.02049583, -0.0204074 , -0.02043335, -0.0204412 , -0.02224096,\n",
      "       -0.02207012, -0.02176827, -0.02144076, -0.02168948, -0.0214885 ,\n",
      "       -0.02104039, -0.02108877, -0.02092704, -0.02156506, -0.0213373 ,\n",
      "       -0.02100407, -0.02100853, -0.02094019, -0.02062979, -0.02057211,\n",
      "       -0.02054392, -0.02067504, -0.02122179, -0.02124021, -0.02108775,\n",
      "       -0.02120693, -0.02107451, -0.02075633, -0.02086781, -0.02069097,\n",
      "       -0.02048102]), 'std_test_score': array([0.00264711, 0.00256341, 0.00270183, 0.00259049, 0.00242073,\n",
      "       0.0025329 , 0.00236263, 0.00248052, 0.00256903, 0.00252198,\n",
      "       0.00242391, 0.00229195, 0.00247755, 0.00253229, 0.00244007,\n",
      "       0.0026189 , 0.00251866, 0.00266319, 0.00237828, 0.00241914,\n",
      "       0.00218116, 0.00275906, 0.00262024, 0.00245613, 0.00251671,\n",
      "       0.0023199 , 0.00270163, 0.00261418, 0.00254104, 0.00255967,\n",
      "       0.00254498, 0.00247911, 0.00251592, 0.00247581, 0.00257519,\n",
      "       0.002635  , 0.00251115, 0.00241161, 0.00272103, 0.0024911 ,\n",
      "       0.00229464, 0.00255306, 0.00251187, 0.00267081, 0.00256422,\n",
      "       0.00231386, 0.00250699, 0.00272313, 0.00272599, 0.00251611,\n",
      "       0.0025132 , 0.00259071, 0.00241816, 0.00263458, 0.00267721,\n",
      "       0.00253402, 0.00240881, 0.00262769, 0.00262215, 0.00264702,\n",
      "       0.00256575, 0.00254704, 0.00256221, 0.00261084, 0.00236874,\n",
      "       0.00249082, 0.00242721, 0.00227813, 0.00262929, 0.00233001,\n",
      "       0.00234245, 0.00238168, 0.00235467, 0.0024887 , 0.00252693,\n",
      "       0.00235893, 0.00252458, 0.00253299, 0.00272011, 0.00244663,\n",
      "       0.00260221]), 'rank_test_score': array([78, 79, 76, 73, 74, 67, 44, 52, 56, 65, 69, 40, 50, 48, 34, 13, 17,\n",
      "       10, 64, 58, 46, 42, 47, 36, 14, 32, 27, 66, 71, 59, 57, 51, 41, 19,\n",
      "       28, 25, 38, 33, 21,  7, 20, 15,  2,  1,  5, 26, 30, 18, 24, 29,  9,\n",
      "        3,  4,  6, 81, 80, 77, 68, 75, 70, 49, 55, 37, 72, 63, 43, 45, 39,\n",
      "       16, 12, 11, 22, 61, 62, 54, 60, 53, 31, 35, 23,  8]), 'split0_train_score': array([-0.00372231, -0.00527715, -0.00726047, -0.0062634 , -0.0069246 ,\n",
      "       -0.00884081, -0.00993655, -0.01001853, -0.01045842, -0.00370973,\n",
      "       -0.00569693, -0.00789655, -0.00710799, -0.0075073 , -0.00968071,\n",
      "       -0.01093651, -0.01108096, -0.01142856, -0.00377134, -0.00550338,\n",
      "       -0.00799742, -0.00696476, -0.00753673, -0.00976023, -0.01088061,\n",
      "       -0.01091746, -0.01143195, -0.00973362, -0.01067731, -0.0118999 ,\n",
      "       -0.01040778, -0.01101366, -0.01196788, -0.01230569, -0.01223861,\n",
      "       -0.01284939, -0.0093687 , -0.01025419, -0.01203666, -0.01104763,\n",
      "       -0.011436  , -0.01263516, -0.01288257, -0.01314523, -0.01322192,\n",
      "       -0.00929836, -0.01053028, -0.0120863 , -0.01098057, -0.0112139 ,\n",
      "       -0.01231272, -0.01316527, -0.01314032, -0.01350467, -0.0041824 ,\n",
      "       -0.00559986, -0.00742085, -0.00679746, -0.00708551, -0.0090074 ,\n",
      "       -0.00997259, -0.00989531, -0.01064188, -0.00391167, -0.00605757,\n",
      "       -0.00827128, -0.00721686, -0.0077413 , -0.0097942 , -0.01100307,\n",
      "       -0.01095154, -0.01147074, -0.00409202, -0.00585469, -0.00821477,\n",
      "       -0.00717412, -0.00764334, -0.00966414, -0.01106038, -0.01095018,\n",
      "       -0.01156393]), 'split1_train_score': array([-0.00369269, -0.00520538, -0.00703215, -0.00625318, -0.00673406,\n",
      "       -0.00857665, -0.00997754, -0.01002022, -0.0103322 , -0.00367082,\n",
      "       -0.00562493, -0.00773909, -0.00696038, -0.0074243 , -0.00944759,\n",
      "       -0.01088198, -0.01069631, -0.01132367, -0.00361497, -0.00550936,\n",
      "       -0.00773367, -0.0069755 , -0.0075328 , -0.00940917, -0.01090265,\n",
      "       -0.01083167, -0.01141066, -0.00923105, -0.00988462, -0.01100851,\n",
      "       -0.01006975, -0.0104874 , -0.01153591, -0.01186209, -0.01201652,\n",
      "       -0.01228274, -0.00914584, -0.01040789, -0.01171842, -0.01085281,\n",
      "       -0.01086405, -0.01241622, -0.01279399, -0.01285875, -0.01296865,\n",
      "       -0.00916862, -0.00993751, -0.01153201, -0.0108336 , -0.01110417,\n",
      "       -0.01228942, -0.01283065, -0.01279643, -0.01319553, -0.00413407,\n",
      "       -0.00540461, -0.00736804, -0.00647002, -0.00673935, -0.00882563,\n",
      "       -0.00997703, -0.00983854, -0.01028244, -0.00399975, -0.00580388,\n",
      "       -0.00815483, -0.00691586, -0.0075719 , -0.00969377, -0.01083303,\n",
      "       -0.01093443, -0.01130443, -0.00393793, -0.00574558, -0.00810359,\n",
      "       -0.00731464, -0.00773342, -0.00953976, -0.01090557, -0.01091636,\n",
      "       -0.011314  ]), 'split2_train_score': array([-0.00377794, -0.00511209, -0.00723455, -0.00616177, -0.0067243 ,\n",
      "       -0.0089302 , -0.0099282 , -0.00993601, -0.01041796, -0.00370507,\n",
      "       -0.00537645, -0.00775886, -0.00676666, -0.00731477, -0.00944415,\n",
      "       -0.01052195, -0.01069247, -0.01124085, -0.00363142, -0.00546432,\n",
      "       -0.00782387, -0.00695836, -0.00743756, -0.00944479, -0.01068936,\n",
      "       -0.0107465 , -0.01110498, -0.00896555, -0.00977258, -0.01093478,\n",
      "       -0.00992806, -0.01009155, -0.01171121, -0.01171749, -0.01168575,\n",
      "       -0.01241767, -0.00904628, -0.01005557, -0.01126969, -0.01031943,\n",
      "       -0.01076997, -0.01212684, -0.01243505, -0.01253085, -0.01291848,\n",
      "       -0.00895063, -0.01012011, -0.01139026, -0.01052058, -0.01086229,\n",
      "       -0.01218541, -0.01240014, -0.01252181, -0.01281713, -0.00396293,\n",
      "       -0.00533454, -0.0074783 , -0.00637308, -0.00685819, -0.0089635 ,\n",
      "       -0.01003031, -0.00988112, -0.01021976, -0.00392254, -0.00572394,\n",
      "       -0.008133  , -0.00696415, -0.00756493, -0.00929444, -0.01067825,\n",
      "       -0.01071218, -0.0112933 , -0.00372388, -0.00564724, -0.00802786,\n",
      "       -0.00689453, -0.00757711, -0.00948214, -0.01062555, -0.01077294,\n",
      "       -0.01126318]), 'split3_train_score': array([-0.00335452, -0.00490385, -0.00654499, -0.00576651, -0.00640016,\n",
      "       -0.0081391 , -0.00916082, -0.00919794, -0.00969368, -0.00328593,\n",
      "       -0.00525695, -0.00734709, -0.00655554, -0.00685978, -0.00898614,\n",
      "       -0.01007784, -0.01006138, -0.01067748, -0.00341872, -0.00520445,\n",
      "       -0.00727316, -0.00667442, -0.00693989, -0.00881155, -0.01006451,\n",
      "       -0.01011071, -0.01061876, -0.00842246, -0.00923241, -0.01050607,\n",
      "       -0.00920155, -0.00944849, -0.01084527, -0.0110261 , -0.01106463,\n",
      "       -0.01141048, -0.00862218, -0.00928357, -0.01033341, -0.00994088,\n",
      "       -0.01020587, -0.01125941, -0.01198672, -0.01176698, -0.0122024 ,\n",
      "       -0.00845014, -0.00935059, -0.01083504, -0.00980926, -0.01033687,\n",
      "       -0.01135028, -0.01186854, -0.0116836 , -0.01199968, -0.00375072,\n",
      "       -0.00521612, -0.00691661, -0.00613775, -0.00656717, -0.00829653,\n",
      "       -0.00929063, -0.00923947, -0.00984963, -0.00368398, -0.00527461,\n",
      "       -0.00746536, -0.00648485, -0.00711304, -0.00900181, -0.0101482 ,\n",
      "       -0.01011278, -0.01067536, -0.00358521, -0.00541859, -0.00766522,\n",
      "       -0.00663646, -0.00714443, -0.00893062, -0.01010959, -0.01025141,\n",
      "       -0.01054016]), 'split4_train_score': array([-0.00354686, -0.00490954, -0.0070594 , -0.00615736, -0.00650711,\n",
      "       -0.0083139 , -0.0094902 , -0.00948323, -0.00989986, -0.00354203,\n",
      "       -0.00519446, -0.00740752, -0.00652076, -0.00700949, -0.00903649,\n",
      "       -0.0101716 , -0.01030535, -0.01074963, -0.00343515, -0.00520302,\n",
      "       -0.00740796, -0.00661862, -0.00694805, -0.00906698, -0.01010233,\n",
      "       -0.01024798, -0.01053871, -0.00896502, -0.00963652, -0.01083837,\n",
      "       -0.01018106, -0.01025087, -0.01119999, -0.01159648, -0.01148232,\n",
      "       -0.01176564, -0.00874356, -0.00973835, -0.01097023, -0.00999154,\n",
      "       -0.01015808, -0.01171497, -0.01218847, -0.01207228, -0.01253129,\n",
      "       -0.00874622, -0.00978979, -0.01109137, -0.01013665, -0.01038477,\n",
      "       -0.01160567, -0.01211065, -0.011856  , -0.01248912, -0.00390392,\n",
      "       -0.00541749, -0.0071491 , -0.00631858, -0.00683365, -0.00842371,\n",
      "       -0.00950373, -0.00936054, -0.00997277, -0.00368238, -0.00550125,\n",
      "       -0.00757691, -0.00679773, -0.00724121, -0.00934513, -0.01011954,\n",
      "       -0.01019767, -0.01074596, -0.00380715, -0.00551882, -0.00768901,\n",
      "       -0.00676732, -0.0072042 , -0.00883785, -0.01032852, -0.01043446,\n",
      "       -0.01082438]), 'mean_train_score': array([-0.00361886, -0.0050816 , -0.00702631, -0.00612044, -0.00665805,\n",
      "       -0.00856013, -0.00969866, -0.00973119, -0.01016042, -0.00358271,\n",
      "       -0.00542994, -0.00762982, -0.00678227, -0.00722313, -0.00931901,\n",
      "       -0.01051798, -0.0105673 , -0.01108404, -0.00357432, -0.00537691,\n",
      "       -0.00764721, -0.00683833, -0.00727901, -0.00929854, -0.01052789,\n",
      "       -0.01057086, -0.01102101, -0.00906354, -0.00984069, -0.01103753,\n",
      "       -0.00995764, -0.01025839, -0.01145205, -0.01170157, -0.01169757,\n",
      "       -0.01214518, -0.00898531, -0.00994792, -0.01126568, -0.01043046,\n",
      "       -0.01068679, -0.01203052, -0.01245736, -0.01247482, -0.01276855,\n",
      "       -0.0089228 , -0.00994566, -0.011387  , -0.01045613, -0.0107804 ,\n",
      "       -0.0119487 , -0.01247505, -0.01239963, -0.01280123, -0.00398681,\n",
      "       -0.00539452, -0.00726658, -0.00641938, -0.00681677, -0.00870336,\n",
      "       -0.00975486, -0.009643  , -0.0101933 , -0.00384006, -0.00567225,\n",
      "       -0.00792028, -0.00687589, -0.00744648, -0.00942587, -0.01055642,\n",
      "       -0.01058172, -0.01109796, -0.00382924, -0.00563699, -0.00794009,\n",
      "       -0.00695742, -0.0074605 , -0.0092909 , -0.01060592, -0.01066507,\n",
      "       -0.01110113]), 'std_train_score': array([0.00015266, 0.00015212, 0.00025729, 0.00018243, 0.00018467,\n",
      "       0.0003013 , 0.00032242, 0.00033283, 0.00030672, 0.00016037,\n",
      "       0.00019877, 0.00021405, 0.00022709, 0.00024791, 0.00026595,\n",
      "       0.00035253, 0.00035235, 0.00030914, 0.00013214, 0.00014224,\n",
      "       0.00026776, 0.0001577 , 0.00027587, 0.00032789, 0.00037061,\n",
      "       0.00032711, 0.00038005, 0.000426  , 0.0004729 , 0.00046415,\n",
      "       0.00040931, 0.00051122, 0.00039294, 0.00041432, 0.00041025,\n",
      "       0.00050456, 0.00027084, 0.00040056, 0.00059259, 0.00044809,\n",
      "       0.00047127, 0.00049352, 0.00034305, 0.0005026 , 0.00035913,\n",
      "       0.00030227, 0.00038747, 0.00042476, 0.00043409, 0.0003613 ,\n",
      "       0.00039507, 0.00047098, 0.00055303, 0.00052734, 0.00015692,\n",
      "       0.00012508, 0.00020746, 0.00021777, 0.00016883, 0.00028941,\n",
      "       0.00030041, 0.00028327, 0.00027445, 0.00013165, 0.00026677,\n",
      "       0.00033116, 0.00023861, 0.00023238, 0.00028673, 0.0003601 ,\n",
      "       0.00035933, 0.00032319, 0.00017436, 0.00015553, 0.00022292,\n",
      "       0.00025206, 0.00023962, 0.00033849, 0.00035214, 0.00027581,\n",
      "       0.00036798])}\n"
     ]
    }
   ],
   "source": [
    "# Access the full results for Random Forest\n",
    "cv_results = grid_CV.cv_results_\n",
    "print(\"CV Results for Random Forest:\", cv_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}\n"
     ]
    }
   ],
   "source": [
    "# Right now (temporary) we will choose this hyperparameters as the best one:\n",
    "print(best_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mi_score</th>\n",
       "      <th>sign_fscore</th>\n",
       "      <th>sign_fscore_0_1</th>\n",
       "      <th>corr</th>\n",
       "      <th>EN_coef</th>\n",
       "      <th>boruta_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>etr_y_past</th>\n",
       "      <td>1.009402</td>\n",
       "      <td>1.304040e-84</td>\n",
       "      <td>1</td>\n",
       "      <td>0.520405</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>etr_y_ma</th>\n",
       "      <td>0.825650</td>\n",
       "      <td>2.473770e-125</td>\n",
       "      <td>1</td>\n",
       "      <td>0.526871</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>txt</th>\n",
       "      <td>0.633067</td>\n",
       "      <td>5.246456e-13</td>\n",
       "      <td>1</td>\n",
       "      <td>0.368732</td>\n",
       "      <td>1.466269e-05</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>diff</th>\n",
       "      <td>0.632640</td>\n",
       "      <td>2.257712e-02</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.291716</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ni</th>\n",
       "      <td>0.613297</td>\n",
       "      <td>1.747230e-09</td>\n",
       "      <td>1</td>\n",
       "      <td>0.263458</td>\n",
       "      <td>-3.442000e-07</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mi_score    sign_fscore  sign_fscore_0_1      corr       EN_coef  \\\n",
       "etr_y_past  1.009402   1.304040e-84                1  0.520405           NaN   \n",
       "etr_y_ma    0.825650  2.473770e-125                1  0.526871           NaN   \n",
       "txt         0.633067   5.246456e-13                1  0.368732  1.466269e-05   \n",
       "diff        0.632640   2.257712e-02                1 -0.291716           NaN   \n",
       "ni          0.613297   1.747230e-09                1  0.263458 -3.442000e-07   \n",
       "\n",
       "            boruta_rank  \n",
       "etr_y_past            1  \n",
       "etr_y_ma              1  \n",
       "txt                   1  \n",
       "diff                  1  \n",
       "ni                    7  "
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature ranking\n",
    "fr.sort_values(\"mi_score\", ascending=False, inplace=True)\n",
    "fr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "br_features = fr[fr.boruta_rank.isin([1, 2, 3])].index.tolist()\n",
    "mi_features = fr.iloc[0:20].index.tolist()\n",
    "mi_features_25 = fr.iloc[0:25].index.tolist()\n",
    "mi_features_35 = fr.iloc[0:35].index.tolist()\n",
    "mi_features_50 = fr.iloc[0:50].index.tolist()\n",
    "fr[\"corr_abs\"] = np.abs(fr[\"corr\"])\n",
    "fr.sort_values(\"corr_abs\", ascending=False, inplace=True)\n",
    "corr_features = fr.iloc[0:20].index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating two additional benchmark sets of variables:\n",
    "benchmark = [\n",
    "    \"rok\",\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"capex2_scaled\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"y_e_p_polity\",\n",
    "    \"y_BR_Democracy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"sektor_consumer discretionary\",\n",
    "    \"sektor_consumer staples\",\n",
    "    \"sektor_energy\",\n",
    "    \"sektor_health care\",\n",
    "    \"sektor_industrials\",\n",
    "    \"sektor_materials\",\n",
    "    \"sektor_real estate\",\n",
    "    \"sektor_technology\",\n",
    "    \"sektor_utilities\",\n",
    "    \"gielda_2\",\n",
    "    \"gielda_3\",\n",
    "    \"gielda_4\",\n",
    "    \"gielda_5\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    \"n_estimators\": [50], # limited it because the code was not loading \n",
    "    \"max_depth\": [None, 10, 20],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": [1, 2, 4],\n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "benchmark2 = [\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Forward elimination\n",
    "forward_elimination = [\n",
    "    \"rok\",\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"capex2_scaled\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"y_e_p_polity\",\n",
    "    \"y_BR_Democracy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"sektor_consumer discretionary\",\n",
    "    \"sektor_consumer staples\",\n",
    "    \"sektor_energy\",\n",
    "    \"sektor_health care\",\n",
    "    \"sektor_industrials\",\n",
    "    \"sektor_materials\",\n",
    "    \"sektor_real estate\",\n",
    "    \"sektor_technology\",\n",
    "    \"sektor_utilities\",\n",
    "    \"gielda_2\",\n",
    "    \"gielda_3\",\n",
    "    \"gielda_4\",\n",
    "    \"gielda_5\",\n",
    "    \"ta_log\",\n",
    "    \"txt_cat_(-63.011, -34.811]\",\n",
    "    \"txt_cat_(-34.811, 0.488]\",\n",
    "    \"txt_cat_(0.488, 24.415]\",\n",
    "    \"txt_cat_(24.415, 25.05]\",\n",
    "    \"txt_cat_(25.05, 308.55]\",\n",
    "    \"txt_cat_(308.55, 327.531]\",\n",
    "    \"txt_cat_(327.531, inf]\",\n",
    "    \"pi_cat_(-8975.0, -1.523]\",\n",
    "    \"pi_cat_(-1.523, 157.119]\",\n",
    "    \"pi_cat_(157.119, 465.9]\",\n",
    "    \"pi_cat_(465.9, 7875.5]\",\n",
    "    \"pi_cat_(7875.5, 8108.5]\",\n",
    "    \"pi_cat_(8108.5, inf]\",\n",
    "    \"str_cat_(0.0875, 0.192]\",\n",
    "    \"str_cat_(0.192, 0.28]\",\n",
    "    \"str_cat_(0.28, inf]\",\n",
    "    \"xrd_exists\",\n",
    "    \"ni_profit\",\n",
    "    \"ni_profit_20000\",\n",
    "    \"ppent_sqrt\",\n",
    "    \"intant_sqrt\",\n",
    "    \"dlc_cat_(42.262, 176.129]\",\n",
    "    \"dlc_cat_(176.129, 200.9]\",\n",
    "    \"dlc_cat_(200.9, inf]\",\n",
    "    \"dltt_cat_(39.38, 327.85]\",\n",
    "    \"dltt_cat_(327.85, 876.617]\",\n",
    "    \"dltt_cat_(876.617, inf]\",\n",
    "    \"capex_cat_(7.447, 79.55]\",\n",
    "    \"capex_cat_(79.55, 5451.0]\",\n",
    "    \"capex_cat_(5451.0, inf]\",\n",
    "    \"revenue_cat_(0.174, 1248.817]\",\n",
    "    \"revenue_cat_(1248.817, 4233.587]\",\n",
    "    \"revenue_cat_(4233.587, inf]\",\n",
    "    \"cce_cat_(5.619, 63.321]\",\n",
    "    \"cce_cat_(63.321, inf]\",\n",
    "    \"adv_cat_(0.3, 874.5]\",\n",
    "    \"adv_cat_(874.5, inf]\",\n",
    "    \"diff_positive\",\n",
    "    \"roa_clip\",\n",
    "    \"lev_sqrt\",\n",
    "    \"intan_pow2\",\n",
    "    \"rd_sqrt\",\n",
    "    \"ppe_clip\",\n",
    "    \"cash_holdings_sqrt\",\n",
    "    \"adv_expenditure_positive\",\n",
    "    \"diff_dta\",\n",
    "    \"cfc_dta\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]\n",
    "forward_elimination.remove(\"ta_log\")\n",
    "forward_elimination.remove(\"ppent_sqrt\")\n",
    "forward_elimination.remove(\"intant_sqrt\")\n",
    "forward_elimination.remove(\"roa\")\n",
    "forward_elimination.remove(\"lev\")\n",
    "forward_elimination.remove(\"intan\")\n",
    "forward_elimination.remove(\"rd_sqrt\")\n",
    "forward_elimination.remove(\"ppe\")\n",
    "forward_elimination.remove(\"cash_holdings_sqrt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "candidates_withoud_discr = [i for i in forward_elimination if \"]\" not in i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 10,\n",
       " 'max_features': 'sqrt',\n",
       " 'min_samples_leaf': 4,\n",
       " 'min_samples_split': 5,\n",
       " 'n_estimators': 50}"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_CV.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestRegressor(**grid_CV.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=15,\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['rok', 'adv', 'dta', 'y_e_p_polity', 'WB_GDPgrowth', 'WB_GDPpc',\n",
      "       'sektor_consumer discretionary', 'sektor_consumer staples',\n",
      "       'sektor_energy', 'sektor_materials', 'lev_sqrt', 'etr_y_past',\n",
      "       'etr_y_ma', 'diff_ma', 'lev_past'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "sffit = sf.fit(\n",
    "    df.loc[:, candidates_withoud_discr].values, df.loc[:, \"etr\"].values.ravel()\n",
    ")\n",
    "\n",
    "sf_features = df.loc[:, candidates_withoud_discr].columns[sffit.support_]\n",
    "\n",
    "print(sf_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestRegressor(**grid_CV.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=(10),\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'adv_expenditure', 'WB_GDPgrowth', 'WB_GDPpc',\n",
       "       'sektor_industrials', 'txt_cat_(308.55, 327.531]', 'cfc_dta',\n",
       "       'etr_y_past', 'etr_y_ma', 'diff_ma'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sffit = sf.fit(\n",
    "    df.loc[:, forward_elimination].values, df.loc[:, \"etr\"].values.ravel()\n",
    ")\n",
    "\n",
    "sf_features2 = df.loc[:, forward_elimination].columns[sffit.support_]\n",
    "\n",
    "sf_features2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf_one_more = ['rok', 'adv_expenditure', 'WB_GDPgrowth', 'WB_GDPpc',\n",
    "       'sektor_industrials', 'txt_cat_(308.55, 327.531]', 'cfc_dta',\n",
    "       'etr_y_past', 'etr_y_ma', 'diff_ma']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestRegressor(**grid_CV.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=(5),\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'WB_GDPgrowth', 'WB_GDPpc', 'etr_y_past', 'etr_y_ma'], dtype='object')"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sffit = sf.fit(df.loc[:, sf_one_more].values, df.loc[:, \"etr\"].values.ravel())\n",
    "\n",
    "sf_features3 = df.loc[:, sf_one_more].columns[sffit.support_]\n",
    "\n",
    "sf_features3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hyperparameters Tunning for each group of variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    \"n_estimators\": [50], # limited it because the code was not loading \n",
    "    \"max_depth\": [None, 10, 20],\n",
    "    \"min_samples_split\": [2, 5, 10],\n",
    "    \"min_samples_leaf\": [1, 2, 4],\n",
    "    \"max_features\": [\"auto\", \"sqrt\", \"log2\"],\n",
    "}\n",
    "\n",
    "mse = make_scorer(mean_squared_error, greater_is_better=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_proc(var):\n",
    "    model = RandomForestRegressor()\n",
    "    grid_CV = GridSearchCV(\n",
    "        model, param, cv=5, scoring=mse, return_train_score=True, n_jobs=-1\n",
    "    )\n",
    "    grid_CV.fit(df.loc[:, var].values, df.loc[:, \"etr\"].values.ravel())\n",
    "    print(grid_CV.best_params_)\n",
    "    print(grid_CV.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}\n",
      "-0.01971669268794258\n"
     ]
    }
   ],
   "source": [
    "cv_proc(benchmark)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}\n",
      "-0.01984860142233728\n"
     ]
    }
   ],
   "source": [
    "cv_proc(benchmark2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}\n",
      "-0.020268014223884086\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}\n",
      "-0.020301190332866863\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}\n",
      "-0.01987788037103176\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}\n",
      "-0.01932408295064683\n"
     ]
    }
   ],
   "source": [
    "cv_proc(br_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50}\n",
      "-0.02021535008019735\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50}\n",
      "-0.019987928258467097\n"
     ]
    }
   ],
   "source": [
    "cv_proc(corr_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}\n",
      "-0.01876015653061835\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}\n",
      "-0.01873191386544544\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50}\n",
      "-0.019125440407054464\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Final models comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort_values(by=\"rok\").reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "def proper_CV(x, y, model, display_res=False):\n",
    "    train_score = list()\n",
    "    valid_score = list()\n",
    "    train_indexes = [0, 1452]\n",
    "    valid_indexes = [1452, 1815]\n",
    "    for i in range(0, 6):\n",
    "        train_x = x[x.index.isin(range(train_indexes[0], train_indexes[1]))]\n",
    "        train_y = y[y.index.isin(range(train_indexes[0], train_indexes[1]))]\n",
    "        valid_x = x[x.index.isin(range(valid_indexes[0], valid_indexes[1]))]\n",
    "        valid_y = y[y.index.isin(range(valid_indexes[0], valid_indexes[1]))]\n",
    "\n",
    "        model.fit(train_x.values, train_y.values.ravel())\n",
    "\n",
    "        pred_y_train = model.predict(train_x.values)\n",
    "        rmse = np.sqrt(mean_squared_error(train_y, pred_y_train))\n",
    "        train_score.append(rmse)\n",
    "\n",
    "        pred_y_val = model.predict(valid_x.values)\n",
    "        rmse = np.sqrt(mean_squared_error(valid_y, pred_y_val))\n",
    "        valid_score.append(rmse)\n",
    "\n",
    "        train_indexes = [0, valid_indexes[1]]\n",
    "        valid_indexes = [train_indexes[1], valid_indexes[1] + 363]\n",
    "\n",
    "    if display_res == True:\n",
    "        view = pd.DataFrame([train_score, valid_score]).T.rename(\n",
    "            columns={0: \"cv_train\", 1: \"cv_val\"}\n",
    "        )\n",
    "        display(view)\n",
    "        return train_score, valid_score, view\n",
    "    else:\n",
    "        return train_score, valid_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "hp = [{'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 50},\n",
    "      {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'log2', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50},\n",
    "      {'max_depth': 10, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 50},\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.097174</td>\n",
       "      <td>0.150032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.097990</td>\n",
       "      <td>0.134356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.096626</td>\n",
       "      <td>0.149449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.100273</td>\n",
       "      <td>0.141498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.100567</td>\n",
       "      <td>0.126682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.101086</td>\n",
       "      <td>0.136459</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.097174  0.150032\n",
       "1  0.097990  0.134356\n",
       "2  0.096626  0.149449\n",
       "3  0.100273  0.141498\n",
       "4  0.100567  0.126682\n",
       "5  0.101086  0.136459"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[0])\n",
    "var = benchmark\n",
    "cv_output0 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.094293</td>\n",
       "      <td>0.148953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.093486</td>\n",
       "      <td>0.135368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.094313</td>\n",
       "      <td>0.149873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.096715</td>\n",
       "      <td>0.139675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.098591</td>\n",
       "      <td>0.126985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.098620</td>\n",
       "      <td>0.134464</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.094293  0.148953\n",
       "1  0.093486  0.135368\n",
       "2  0.094313  0.149873\n",
       "3  0.096715  0.139675\n",
       "4  0.098591  0.126985\n",
       "5  0.098620  0.134464"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[1])\n",
    "var = benchmark2\n",
    "cv_output1 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.105496</td>\n",
       "      <td>0.141455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.107947</td>\n",
       "      <td>0.129265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.107132</td>\n",
       "      <td>0.148933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.109605</td>\n",
       "      <td>0.140228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.110724</td>\n",
       "      <td>0.127534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.110810</td>\n",
       "      <td>0.133820</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.105496  0.141455\n",
       "1  0.107947  0.129265\n",
       "2  0.107132  0.148933\n",
       "3  0.109605  0.140228\n",
       "4  0.110724  0.127534\n",
       "5  0.110810  0.133820"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[2])\n",
    "var = br_features\n",
    "cv_output2 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.107662</td>\n",
       "      <td>0.140257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.105817</td>\n",
       "      <td>0.136024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.105741</td>\n",
       "      <td>0.149587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.108964</td>\n",
       "      <td>0.141639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.109539</td>\n",
       "      <td>0.126694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.109995</td>\n",
       "      <td>0.133240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.107662  0.140257\n",
       "1  0.105817  0.136024\n",
       "2  0.105741  0.149587\n",
       "3  0.108964  0.141639\n",
       "4  0.109539  0.126694\n",
       "5  0.109995  0.133240"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[3])\n",
    "var = mi_features\n",
    "cv_output3 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.102388</td>\n",
       "      <td>0.149679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.101681</td>\n",
       "      <td>0.133307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.102524</td>\n",
       "      <td>0.150290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.103767</td>\n",
       "      <td>0.141655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.106458</td>\n",
       "      <td>0.123587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.106296</td>\n",
       "      <td>0.135664</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.102388  0.149679\n",
       "1  0.101681  0.133307\n",
       "2  0.102524  0.150290\n",
       "3  0.103767  0.141655\n",
       "4  0.106458  0.123587\n",
       "5  0.106296  0.135664"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[4])\n",
    "var = corr_features\n",
    "cv_output4 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.110150</td>\n",
       "      <td>0.136208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.108561</td>\n",
       "      <td>0.129145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.109976</td>\n",
       "      <td>0.145982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.111485</td>\n",
       "      <td>0.142458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.114263</td>\n",
       "      <td>0.125126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.113704</td>\n",
       "      <td>0.133111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.110150  0.136208\n",
       "1  0.108561  0.129145\n",
       "2  0.109976  0.145982\n",
       "3  0.111485  0.142458\n",
       "4  0.114263  0.125126\n",
       "5  0.113704  0.133111"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[5])\n",
    "var = sf_features\n",
    "cv_output5 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.104846</td>\n",
       "      <td>0.140728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.106327</td>\n",
       "      <td>0.127826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.105714</td>\n",
       "      <td>0.148580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.109171</td>\n",
       "      <td>0.144513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.111425</td>\n",
       "      <td>0.128343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.111339</td>\n",
       "      <td>0.136340</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.104846  0.140728\n",
       "1  0.106327  0.127826\n",
       "2  0.105714  0.148580\n",
       "3  0.109171  0.144513\n",
       "4  0.111425  0.128343\n",
       "5  0.111339  0.136340"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[6])\n",
    "var = sf_features2\n",
    "cv_output6 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.107369</td>\n",
       "      <td>0.140775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.108129</td>\n",
       "      <td>0.129624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.108060</td>\n",
       "      <td>0.146992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.111542</td>\n",
       "      <td>0.145177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.113923</td>\n",
       "      <td>0.127645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.113975</td>\n",
       "      <td>0.135739</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.107369  0.140775\n",
       "1  0.108129  0.129624\n",
       "2  0.108060  0.146992\n",
       "3  0.111542  0.145177\n",
       "4  0.113923  0.127645\n",
       "5  0.113975  0.135739"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[7])\n",
    "var = sf_features3\n",
    "cv_output7 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.099722</td>\n",
       "      <td>0.140206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.098509</td>\n",
       "      <td>0.137813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.098919</td>\n",
       "      <td>0.148632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.099952</td>\n",
       "      <td>0.141386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.099191</td>\n",
       "      <td>0.125870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.097427</td>\n",
       "      <td>0.133513</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.099722  0.140206\n",
       "1  0.098509  0.137813\n",
       "2  0.098919  0.148632\n",
       "3  0.099952  0.141386\n",
       "4  0.099191  0.125870\n",
       "5  0.097427  0.133513"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[8])\n",
    "var = mi_features_25\n",
    "cv_output8 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.091928</td>\n",
       "      <td>0.140050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.092218</td>\n",
       "      <td>0.137970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.095084</td>\n",
       "      <td>0.152135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.096032</td>\n",
       "      <td>0.142252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.098854</td>\n",
       "      <td>0.126151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.098903</td>\n",
       "      <td>0.134203</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.091928  0.140050\n",
       "1  0.092218  0.137970\n",
       "2  0.095084  0.152135\n",
       "3  0.096032  0.142252\n",
       "4  0.098854  0.126151\n",
       "5  0.098903  0.134203"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[9])\n",
    "var = mi_features_35\n",
    "cv_output9 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.102642</td>\n",
       "      <td>0.140282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.102768</td>\n",
       "      <td>0.134777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.101010</td>\n",
       "      <td>0.149804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.103250</td>\n",
       "      <td>0.140123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.105993</td>\n",
       "      <td>0.124622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.105284</td>\n",
       "      <td>0.132600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.102642  0.140282\n",
       "1  0.102768  0.134777\n",
       "2  0.101010  0.149804\n",
       "3  0.103250  0.140123\n",
       "4  0.105993  0.124622\n",
       "5  0.105284  0.132600"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[10])\n",
    "var = mi_features_50\n",
    "cv_output10 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_mean</th>\n",
       "      <th>test_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.098953</td>\n",
       "      <td>0.139746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.096003</td>\n",
       "      <td>0.139219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.108619</td>\n",
       "      <td>0.136873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.107953</td>\n",
       "      <td>0.137907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.103852</td>\n",
       "      <td>0.139030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.111357</td>\n",
       "      <td>0.135338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.108137</td>\n",
       "      <td>0.137722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.110500</td>\n",
       "      <td>0.137659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.098953</td>\n",
       "      <td>0.137903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.095503</td>\n",
       "      <td>0.138793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.103491</td>\n",
       "      <td>0.137035</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    train_mean  test_mean\n",
       "0     0.098953   0.139746\n",
       "1     0.096003   0.139219\n",
       "2     0.108619   0.136873\n",
       "3     0.107953   0.137907\n",
       "4     0.103852   0.139030\n",
       "5     0.111357   0.135338\n",
       "6     0.108137   0.137722\n",
       "7     0.110500   0.137659\n",
       "8     0.098953   0.137903\n",
       "9     0.095503   0.138793\n",
       "10    0.103491   0.137035"
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(\n",
    "    [\n",
    "        cv_output0[2].mean().tolist(),\n",
    "        cv_output1[2].mean().tolist(),\n",
    "        cv_output2[2].mean().tolist(),\n",
    "        cv_output3[2].mean().tolist(),\n",
    "        cv_output4[2].mean().tolist(),\n",
    "        cv_output5[2].mean().tolist(),\n",
    "        cv_output6[2].mean().tolist(),\n",
    "        cv_output7[2].mean().tolist(),\n",
    "        cv_output8[2].mean().tolist(),\n",
    "        cv_output9[2].mean().tolist(),\n",
    "        cv_output10[2].mean().tolist(),\n",
    "    ],\n",
    "    columns=[\"train_mean\", \"test_mean\"],\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_std</th>\n",
       "      <th>test_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.001918</td>\n",
       "      <td>0.009095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.002288</td>\n",
       "      <td>0.008895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.002127</td>\n",
       "      <td>0.008150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.001857</td>\n",
       "      <td>0.007835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.002068</td>\n",
       "      <td>0.010292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.002243</td>\n",
       "      <td>0.007904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.002902</td>\n",
       "      <td>0.008495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.003042</td>\n",
       "      <td>0.008023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.000913</td>\n",
       "      <td>0.007702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.003060</td>\n",
       "      <td>0.008638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.001840</td>\n",
       "      <td>0.008509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    train_std  test_std\n",
       "0    0.001918  0.009095\n",
       "1    0.002288  0.008895\n",
       "2    0.002127  0.008150\n",
       "3    0.001857  0.007835\n",
       "4    0.002068  0.010292\n",
       "5    0.002243  0.007904\n",
       "6    0.002902  0.008495\n",
       "7    0.003042  0.008023\n",
       "8    0.000913  0.007702\n",
       "9    0.003060  0.008638\n",
       "10   0.001840  0.008509"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(\n",
    "    [\n",
    "        cv_output0[2].std().tolist(),\n",
    "        cv_output1[2].std().tolist(),\n",
    "        cv_output2[2].std().tolist(),\n",
    "        cv_output3[2].std().tolist(),\n",
    "        cv_output4[2].std().tolist(),\n",
    "        cv_output5[2].std().tolist(),\n",
    "        cv_output6[2].std().tolist(),\n",
    "        cv_output7[2].std().tolist(),\n",
    "        cv_output8[2].std().tolist(),\n",
    "        cv_output9[2].std().tolist(),\n",
    "        cv_output10[2].std().tolist(),\n",
    "    ],\n",
    "    columns=[\"train_std\", \"test_std\"],\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['rok', 'adv', 'dta', 'y_e_p_polity', 'WB_GDPgrowth', 'WB_GDPpc',\n",
      "       'sektor_consumer discretionary', 'sektor_consumer staples',\n",
      "       'sektor_energy', 'sektor_materials', 'lev_sqrt', 'etr_y_past',\n",
      "       'etr_y_ma', 'diff_ma', 'lev_past'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# 6th model\n",
    "print(sf_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(max_depth=10, max_features='log2', min_samples_leaf=4,\n",
       "                      min_samples_split=10, n_estimators=50)"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = RandomForestRegressor(**hp[5])\n",
    "model.fit(df.loc[:, sf_features].values, df.loc[:, \"etr\"].values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"../models/rf.sav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(model, open(filename, \"wb\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression with Elastic Net"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_output_data_path =  \".../data/output\"\n",
    "\n",
    "df = pd.read_csv(f\"{preprocessed_output_data_path}/train_fe.csv\", index_col=0)\n",
    "\n",
    "fr = pd.read_excel(f\"{preprocessed_output_data_path}/feature_ranking.xlsx\", index_col=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can omit that part in the case of Decision Tree \n",
    "# (as stated in the exercise description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['etr_y_past', 'etr_y_ma', 'txt', 'diff', 'ni', 'pi', 'intant', 'intant_sqrt', 'ta', 'revenue']\n"
     ]
    }
   ],
   "source": [
    "# Searching for \"good enough\" model to feature selection\n",
    "var = fr.mi_score.sort_values(ascending=False).index.tolist()[0:10]\n",
    "print(var) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63.190189111918315"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape[0] ** (0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters for Elastic Net: {'alpha': 0.5, 'l1_ratio': 0.1}\n"
     ]
    }
   ],
   "source": [
    "# Define the parameter grid for Elastic Net\n",
    "param = {\n",
    "    \"alpha\": [0.1, 0.5, 1.0],\n",
    "    \"l1_ratio\": [0.1, 0.5, 0.9],\n",
    "}\n",
    "\n",
    "# Define the mean squared error scorer\n",
    "mse = make_scorer(mean_squared_error, greater_is_better=False)\n",
    "\n",
    "# Create the ElasticNet model\n",
    "model = ElasticNet()\n",
    "\n",
    "# Create the GridSearchCV object for Elastic Net\n",
    "grid_CV = GridSearchCV(\n",
    "    model, param, cv=5, scoring=mse, return_train_score=True, n_jobs=-1\n",
    ")\n",
    "\n",
    "# Fit the grid search to the data\n",
    "grid_CV.fit(df.loc[:, var].values, df.loc[:, \"etr\"].values.ravel())\n",
    "\n",
    "# Get the best parameters for Elastic Net\n",
    "best_params = grid_CV.best_params_\n",
    "print(\"Best Parameters for Elastic Net:\", best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'mean_fit_time': array([0.02202797, 0.01693521, 0.00815468, 0.00857191, 0.00376339,\n",
      "       0.00565724, 0.01005464, 0.00635309, 0.00528479]), 'std_fit_time': array([0.00407073, 0.00798678, 0.00018821, 0.00068305, 0.00460919,\n",
      "       0.00692971, 0.00820958, 0.00712128, 0.00270563]), 'mean_score_time': array([1.99947357e-03, 0.00000000e+00, 2.54888535e-03, 1.60164833e-03,\n",
      "       0.00000000e+00, 7.53879547e-05, 0.00000000e+00, 4.24194336e-04,\n",
      "       8.84675980e-04]), 'std_score_time': array([0.00275932, 0.        , 0.00312173, 0.0032033 , 0.        ,\n",
      "       0.00015078, 0.        , 0.00084839, 0.0011698 ]), 'param_alpha': masked_array(data=[0.1, 0.1, 0.1, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_l1_ratio': masked_array(data=[0.1, 0.5, 0.9, 0.1, 0.5, 0.9, 0.1, 0.5, 0.9],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'alpha': 0.1, 'l1_ratio': 0.1}, {'alpha': 0.1, 'l1_ratio': 0.5}, {'alpha': 0.1, 'l1_ratio': 0.9}, {'alpha': 0.5, 'l1_ratio': 0.1}, {'alpha': 0.5, 'l1_ratio': 0.5}, {'alpha': 0.5, 'l1_ratio': 0.9}, {'alpha': 1.0, 'l1_ratio': 0.1}, {'alpha': 1.0, 'l1_ratio': 0.5}, {'alpha': 1.0, 'l1_ratio': 0.9}], 'split0_test_score': array([-0.02084236, -0.02090618, -0.02095647, -0.02090678, -0.02145826,\n",
      "       -0.0214792 , -0.02097562, -0.02145504, -0.02128016]), 'split1_test_score': array([-0.02167706, -0.0216256 , -0.02159319, -0.02162498, -0.02164193,\n",
      "       -0.0217907 , -0.02158734, -0.02179648, -0.02183627]), 'split2_test_score': array([-0.0200194 , -0.02003677, -0.02006719, -0.02003715, -0.02028103,\n",
      "       -0.0204105 , -0.02007748, -0.020405  , -0.02036969]), 'split3_test_score': array([-0.0313799 , -0.02703238, -0.02688979, -0.0270296 , -0.02711186,\n",
      "       -0.02734033, -0.0268648 , -0.0273374 , -0.02732256]), 'split4_test_score': array([-0.02646603, -0.026549  , -0.02664526, -0.02654995, -0.02714273,\n",
      "       -0.02727663, -0.02667323, -0.02727803, -0.02728787]), 'mean_test_score': array([-0.02407695, -0.02322998, -0.02323038, -0.02322969, -0.02352716,\n",
      "       -0.02365947, -0.02323569, -0.02365439, -0.02361931]), 'std_test_score': array([0.00428314, 0.00295448, 0.00292949, 0.00295387, 0.00297638,\n",
      "       0.00301444, 0.00292528, 0.00301804, 0.00304576]), 'rank_test_score': array([9, 2, 3, 1, 5, 8, 4, 7, 6]), 'split0_train_score': array([-0.02345851, -0.02347798, -0.02350662, -0.02347821, -0.02377819,\n",
      "       -0.02384081, -0.02351713, -0.02384177, -0.02385314]), 'split1_train_score': array([-0.02311416, -0.02315013, -0.02318669, -0.02315044, -0.02345925,\n",
      "       -0.02369541, -0.02319721, -0.02369586, -0.02369783]), 'split2_train_score': array([-0.02346861, -0.02350343, -0.02353847, -0.02350368, -0.0237807 ,\n",
      "       -0.02396836, -0.02354794, -0.02397014, -0.02399062]), 'split3_train_score': array([-0.02158858, -0.02174107, -0.02177828, -0.02174148, -0.02212905,\n",
      "       -0.02226645, -0.02179234, -0.02226814, -0.02227661]), 'split4_train_score': array([-0.02186711, -0.0219023 , -0.02193696, -0.02190253, -0.02218728,\n",
      "       -0.02227083, -0.02194663, -0.02227114, -0.02227318]), 'mean_train_score': array([-0.02269939, -0.02275498, -0.0227894 , -0.02275527, -0.02306689,\n",
      "       -0.02320837, -0.02280025, -0.02320941, -0.02321827]), 'std_train_score': array([0.00080828, 0.00077384, 0.00077232, 0.0007738 , 0.00075135,\n",
      "       0.00077213, 0.00077137, 0.00077221, 0.00077582])}\n"
     ]
    }
   ],
   "source": [
    "# Access the full results\n",
    "cv_results_elastic_net = grid_CV_elastic_net.cv_results_\n",
    "print(cv_results_elastic_net)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.5, 'l1_ratio': 0.1}\n"
     ]
    }
   ],
   "source": [
    "# Right now (temporary) we will choose this hyperparameters as the best one:\n",
    "print(best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mi_score</th>\n",
       "      <th>sign_fscore</th>\n",
       "      <th>sign_fscore_0_1</th>\n",
       "      <th>corr</th>\n",
       "      <th>EN_coef</th>\n",
       "      <th>boruta_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>etr_y_past</th>\n",
       "      <td>1.009402</td>\n",
       "      <td>1.304040e-84</td>\n",
       "      <td>1</td>\n",
       "      <td>0.520405</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>etr_y_ma</th>\n",
       "      <td>0.825650</td>\n",
       "      <td>2.473770e-125</td>\n",
       "      <td>1</td>\n",
       "      <td>0.526871</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>txt</th>\n",
       "      <td>0.633067</td>\n",
       "      <td>5.246456e-13</td>\n",
       "      <td>1</td>\n",
       "      <td>0.368732</td>\n",
       "      <td>1.466269e-05</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>diff</th>\n",
       "      <td>0.632640</td>\n",
       "      <td>2.257712e-02</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.291716</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ni</th>\n",
       "      <td>0.613297</td>\n",
       "      <td>1.747230e-09</td>\n",
       "      <td>1</td>\n",
       "      <td>0.263458</td>\n",
       "      <td>-3.442000e-07</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mi_score    sign_fscore  sign_fscore_0_1      corr       EN_coef  \\\n",
       "etr_y_past  1.009402   1.304040e-84                1  0.520405           NaN   \n",
       "etr_y_ma    0.825650  2.473770e-125                1  0.526871           NaN   \n",
       "txt         0.633067   5.246456e-13                1  0.368732  1.466269e-05   \n",
       "diff        0.632640   2.257712e-02                1 -0.291716           NaN   \n",
       "ni          0.613297   1.747230e-09                1  0.263458 -3.442000e-07   \n",
       "\n",
       "            boruta_rank  \n",
       "etr_y_past            1  \n",
       "etr_y_ma              1  \n",
       "txt                   1  \n",
       "diff                  1  \n",
       "ni                    7  "
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature ranking\n",
    "fr.sort_values(\"mi_score\", ascending=False, inplace=True)\n",
    "fr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "br_features = fr[fr.boruta_rank.isin([1, 2, 3])].index.tolist()\n",
    "mi_features = fr.iloc[0:20].index.tolist()\n",
    "mi_features_25 = fr.iloc[0:25].index.tolist()\n",
    "mi_features_35 = fr.iloc[0:35].index.tolist()\n",
    "mi_features_50 = fr.iloc[0:50].index.tolist()\n",
    "fr[\"corr_abs\"] = np.abs(fr[\"corr\"])\n",
    "fr.sort_values(\"corr_abs\", ascending=False, inplace=True)\n",
    "corr_features = fr.iloc[0:20].index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating two additional benchmark sets of variables:\n",
    "benchmark = [\n",
    "    \"rok\",\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"capex2_scaled\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"y_e_p_polity\",\n",
    "    \"y_BR_Democracy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"sektor_consumer discretionary\",\n",
    "    \"sektor_consumer staples\",\n",
    "    \"sektor_energy\",\n",
    "    \"sektor_health care\",\n",
    "    \"sektor_industrials\",\n",
    "    \"sektor_materials\",\n",
    "    \"sektor_real estate\",\n",
    "    \"sektor_technology\",\n",
    "    \"sektor_utilities\",\n",
    "    \"gielda_2\",\n",
    "    \"gielda_3\",\n",
    "    \"gielda_4\",\n",
    "    \"gielda_5\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    \"alpha\": [0.1, 0.5, 1.0],\n",
    "    \"l1_ratio\": [0.1, 0.5, 0.9],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "benchmark2 = [\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Forward elimination\n",
    "forward_elimination = [\n",
    "    \"rok\",\n",
    "    \"ta\",\n",
    "    \"txt\",\n",
    "    \"pi\",\n",
    "    \"str\",\n",
    "    \"xrd\",\n",
    "    \"ni\",\n",
    "    \"ppent\",\n",
    "    \"intant\",\n",
    "    \"dlc\",\n",
    "    \"dltt\",\n",
    "    \"capex\",\n",
    "    \"revenue\",\n",
    "    \"cce\",\n",
    "    \"adv\",\n",
    "    \"diff\",\n",
    "    \"roa\",\n",
    "    \"lev\",\n",
    "    \"intan\",\n",
    "    \"rd\",\n",
    "    \"ppe\",\n",
    "    \"sale\",\n",
    "    \"cash_holdings\",\n",
    "    \"adv_expenditure\",\n",
    "    \"capex2\",\n",
    "    \"cfc\",\n",
    "    \"dta\",\n",
    "    \"capex2_scaled\",\n",
    "    \"y_v2x_polyarchy\",\n",
    "    \"y_e_p_polity\",\n",
    "    \"y_BR_Democracy\",\n",
    "    \"WB_GDPgrowth\",\n",
    "    \"WB_GDPpc\",\n",
    "    \"WB_Inflation\",\n",
    "    \"rr_per_country\",\n",
    "    \"rr_per_sector\",\n",
    "    \"sektor_consumer discretionary\",\n",
    "    \"sektor_consumer staples\",\n",
    "    \"sektor_energy\",\n",
    "    \"sektor_health care\",\n",
    "    \"sektor_industrials\",\n",
    "    \"sektor_materials\",\n",
    "    \"sektor_real estate\",\n",
    "    \"sektor_technology\",\n",
    "    \"sektor_utilities\",\n",
    "    \"gielda_2\",\n",
    "    \"gielda_3\",\n",
    "    \"gielda_4\",\n",
    "    \"gielda_5\",\n",
    "    \"ta_log\",\n",
    "    \"txt_cat_(-63.011, -34.811]\",\n",
    "    \"txt_cat_(-34.811, 0.488]\",\n",
    "    \"txt_cat_(0.488, 24.415]\",\n",
    "    \"txt_cat_(24.415, 25.05]\",\n",
    "    \"txt_cat_(25.05, 308.55]\",\n",
    "    \"txt_cat_(308.55, 327.531]\",\n",
    "    \"txt_cat_(327.531, inf]\",\n",
    "    \"pi_cat_(-8975.0, -1.523]\",\n",
    "    \"pi_cat_(-1.523, 157.119]\",\n",
    "    \"pi_cat_(157.119, 465.9]\",\n",
    "    \"pi_cat_(465.9, 7875.5]\",\n",
    "    \"pi_cat_(7875.5, 8108.5]\",\n",
    "    \"pi_cat_(8108.5, inf]\",\n",
    "    \"str_cat_(0.0875, 0.192]\",\n",
    "    \"str_cat_(0.192, 0.28]\",\n",
    "    \"str_cat_(0.28, inf]\",\n",
    "    \"xrd_exists\",\n",
    "    \"ni_profit\",\n",
    "    \"ni_profit_20000\",\n",
    "    \"ppent_sqrt\",\n",
    "    \"intant_sqrt\",\n",
    "    \"dlc_cat_(42.262, 176.129]\",\n",
    "    \"dlc_cat_(176.129, 200.9]\",\n",
    "    \"dlc_cat_(200.9, inf]\",\n",
    "    \"dltt_cat_(39.38, 327.85]\",\n",
    "    \"dltt_cat_(327.85, 876.617]\",\n",
    "    \"dltt_cat_(876.617, inf]\",\n",
    "    \"capex_cat_(7.447, 79.55]\",\n",
    "    \"capex_cat_(79.55, 5451.0]\",\n",
    "    \"capex_cat_(5451.0, inf]\",\n",
    "    \"revenue_cat_(0.174, 1248.817]\",\n",
    "    \"revenue_cat_(1248.817, 4233.587]\",\n",
    "    \"revenue_cat_(4233.587, inf]\",\n",
    "    \"cce_cat_(5.619, 63.321]\",\n",
    "    \"cce_cat_(63.321, inf]\",\n",
    "    \"adv_cat_(0.3, 874.5]\",\n",
    "    \"adv_cat_(874.5, inf]\",\n",
    "    \"diff_positive\",\n",
    "    \"roa_clip\",\n",
    "    \"lev_sqrt\",\n",
    "    \"intan_pow2\",\n",
    "    \"rd_sqrt\",\n",
    "    \"ppe_clip\",\n",
    "    \"cash_holdings_sqrt\",\n",
    "    \"adv_expenditure_positive\",\n",
    "    \"diff_dta\",\n",
    "    \"cfc_dta\",\n",
    "    \"etr_y_past\",\n",
    "    \"etr_y_ma\",\n",
    "    \"diff_ma\",\n",
    "    \"roa_ma\",\n",
    "    \"lev_ma\",\n",
    "    \"intan_ma\",\n",
    "    \"ppe_ma\",\n",
    "    \"sale_ma\",\n",
    "    \"cash_holdings_ma\",\n",
    "    \"roa_past\",\n",
    "    \"lev_past\",\n",
    "    \"intan_past\",\n",
    "    \"ppe_past\",\n",
    "    \"sale_past\",\n",
    "    \"cash_holdings_past\",\n",
    "]\n",
    "forward_elimination.remove(\"ta_log\")\n",
    "forward_elimination.remove(\"ppent_sqrt\")\n",
    "forward_elimination.remove(\"intant_sqrt\")\n",
    "forward_elimination.remove(\"roa\")\n",
    "forward_elimination.remove(\"lev\")\n",
    "forward_elimination.remove(\"intan\")\n",
    "forward_elimination.remove(\"rd_sqrt\")\n",
    "forward_elimination.remove(\"ppe\")\n",
    "forward_elimination.remove(\"cash_holdings_sqrt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "candidates_withoud_discr = [i for i in forward_elimination if \"]\" not in i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'alpha': 0.5, 'l1_ratio': 0.1}"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_CV.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'str', 'capex', 'adv', 'rd', 'sale', 'cash_holdings',\n",
       "       'adv_expenditure', 'cfc', 'dta', 'capex2_scaled', 'y_v2x_polyarchy',\n",
       "       'y_e_p_polity', 'WB_GDPpc', 'diff_ma'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ElasticNet(**grid_CV.best_params_)\n",
    "\n",
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=15,\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")\n",
    "\n",
    "sffit = sf.fit(\n",
    "    df.loc[:, candidates_withoud_discr].values, df.loc[:, \"etr\"].values.ravel()\n",
    ")\n",
    "\n",
    "sf_features = df.loc[:, candidates_withoud_discr].columns[sffit.support_]\n",
    "\n",
    "sf_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'str', 'capex', 'adv', 'rd', 'sale', 'cash_holdings',\n",
       "       'adv_expenditure', 'WB_GDPpc', 'diff_ma'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ElasticNet(**grid_CV.best_params_)\n",
    "\n",
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=10,\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")\n",
    "\n",
    "sffit = sf.fit(\n",
    "    df.loc[:, forward_elimination].values, df.loc[:, \"etr\"].values.ravel()\n",
    ")\n",
    "\n",
    "sf_features2 = df.loc[:, forward_elimination].columns[sffit.support_]\n",
    "\n",
    "sf_features2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf_one_more = ['rok', 'str', 'capex', 'adv', 'rd', 'sale', 'cash_holdings',\n",
    "       'adv_expenditure', 'WB_GDPpc', 'diff_ma']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rok', 'capex', 'adv', 'WB_GDPpc', 'diff_ma'], dtype='object')"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ElasticNet(**grid_CV.best_params_)\n",
    "\n",
    "sf = SFS(\n",
    "    model,\n",
    "    n_features_to_select=5,\n",
    "    direction='forward',\n",
    "    scoring=mse,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    ")\n",
    "\n",
    "sffit = sf.fit(df.loc[:, sf_one_more].values, df.loc[:, \"etr\"].values.ravel())\n",
    "\n",
    "sf_features3 = df.loc[:, sf_one_more].columns[sffit.support_]\n",
    "\n",
    "sf_features3\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hyperparameters Tunning for each group of variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "param = {\n",
    "    \"alpha\": [0.1, 0.5, 1.0],\n",
    "    \"l1_ratio\": [0.1, 0.5, 0.9],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "mse = make_scorer(mean_squared_error, greater_is_better=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_proc(var):\n",
    "    model = ElasticNet()\n",
    "    grid_CV = GridSearchCV(\n",
    "        model, param, cv=5, scoring=mse, return_train_score=True, n_jobs=-1\n",
    "    )\n",
    "    grid_CV.fit(df.loc[:, var].values, df.loc[:, \"etr\"].values.ravel())\n",
    "    print(grid_CV.best_params_)\n",
    "    print(grid_CV.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.5, 'l1_ratio': 0.5}\n",
      "-0.02273150273140519\n"
     ]
    }
   ],
   "source": [
    "cv_proc(benchmark)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.5, 'l1_ratio': 0.5}\n",
      "-0.02273150273140519\n"
     ]
    }
   ],
   "source": [
    "cv_proc(benchmark2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.1, 'l1_ratio': 0.5}\n",
      "-0.02349473571209013\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.1, 'l1_ratio': 0.5}\n",
      "-0.02349314354465108\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 1.0, 'l1_ratio': 0.9}\n",
      "-0.022813729057432543\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features_50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 1.0, 'l1_ratio': 0.9}\n",
      "-0.022434918776587997\n"
     ]
    }
   ],
   "source": [
    "cv_proc(br_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.5, 'l1_ratio': 0.1}\n",
      "-0.023463526606129465\n"
     ]
    }
   ],
   "source": [
    "cv_proc(mi_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 1.0, 'l1_ratio': 0.9}\n",
      "-0.02268671695536531\n"
     ]
    }
   ],
   "source": [
    "cv_proc(corr_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.1, 'l1_ratio': 0.1}\n",
      "-0.02234551583484342\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features_linear_elastic_net)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.1, 'l1_ratio': 0.1}\n",
      "-0.022345515725070184\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features2_linear_elastic_net)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.1, 'l1_ratio': 0.1}\n",
      "-0.022345515725070184\n"
     ]
    }
   ],
   "source": [
    "cv_proc(sf_features3_linear_elastic_net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Final models comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort_values(by=\"rok\").reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "def proper_CV(x, y, model, display_res=False):\n",
    "    train_score = list()\n",
    "    valid_score = list()\n",
    "    train_indexes = [0, 1452]\n",
    "    valid_indexes = [1452, 1815]\n",
    "    for i in range(0, 6):\n",
    "        train_x = x[x.index.isin(range(train_indexes[0], train_indexes[1]))]\n",
    "        train_y = y[y.index.isin(range(train_indexes[0], train_indexes[1]))]\n",
    "        valid_x = x[x.index.isin(range(valid_indexes[0], valid_indexes[1]))]\n",
    "        valid_y = y[y.index.isin(range(valid_indexes[0], valid_indexes[1]))]\n",
    "\n",
    "        model.fit(train_x.values, train_y.values.ravel())\n",
    "\n",
    "        pred_y_train = model.predict(train_x.values)\n",
    "        rmse = np.sqrt(mean_squared_error(train_y, pred_y_train))\n",
    "        train_score.append(rmse)\n",
    "\n",
    "        pred_y_val = model.predict(valid_x.values)\n",
    "        rmse = np.sqrt(mean_squared_error(valid_y, pred_y_val))\n",
    "        valid_score.append(rmse)\n",
    "\n",
    "        train_indexes = [0, valid_indexes[1]]\n",
    "        valid_indexes = [train_indexes[1], valid_indexes[1] + 363]\n",
    "\n",
    "    if display_res == True:\n",
    "        view = pd.DataFrame([train_score, valid_score]).T.rename(\n",
    "            columns={0: \"cv_train\", 1: \"cv_val\"}\n",
    "        )\n",
    "        display(view)\n",
    "        return train_score, valid_score, view\n",
    "    else:\n",
    "        return train_score, valid_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "hp = [{'alpha': 0.5, 'l1_ratio': 0.5},\n",
    "{'alpha': 0.5, 'l1_ratio': 0.5},\n",
    "{'alpha': 0.1, 'l1_ratio': 0.5},\n",
    "{'alpha': 0.1, 'l1_ratio': 0.5},\n",
    "{'alpha': 1.0, 'l1_ratio': 0.9},\n",
    "{'alpha': 1.0, 'l1_ratio': 0.9},\n",
    "{'alpha': 0.5, 'l1_ratio': 0.1},\n",
    "{'alpha': 1.0, 'l1_ratio': 0.9},\n",
    "{'alpha': 0.1, 'l1_ratio': 0.1},\n",
    "{'alpha': 0.1, 'l1_ratio': 0.1},\n",
    "{'alpha': 0.1, 'l1_ratio': 0.1},\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.153203</td>\n",
       "      <td>0.134050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.149315</td>\n",
       "      <td>0.141505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.147838</td>\n",
       "      <td>0.152485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.148425</td>\n",
       "      <td>0.149402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.148425</td>\n",
       "      <td>0.136559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147039</td>\n",
       "      <td>0.143490</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.153203  0.134050\n",
       "1  0.149315  0.141505\n",
       "2  0.147838  0.152485\n",
       "3  0.148425  0.149402\n",
       "4  0.148425  0.136559\n",
       "5  0.147039  0.143490"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[0])\n",
    "var = benchmark\n",
    "cv_output0 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.153203</td>\n",
       "      <td>0.134050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.149315</td>\n",
       "      <td>0.141505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.147838</td>\n",
       "      <td>0.152485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.148425</td>\n",
       "      <td>0.149402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.148425</td>\n",
       "      <td>0.136559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147039</td>\n",
       "      <td>0.143490</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.153203  0.134050\n",
       "1  0.149315  0.141505\n",
       "2  0.147838  0.152485\n",
       "3  0.148425  0.149402\n",
       "4  0.148425  0.136559\n",
       "5  0.147039  0.143490"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[1])\n",
    "var = benchmark2\n",
    "cv_output1 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.154136</td>\n",
       "      <td>0.132225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.149961</td>\n",
       "      <td>0.140168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.148333</td>\n",
       "      <td>0.152676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.148935</td>\n",
       "      <td>0.150441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.149122</td>\n",
       "      <td>0.137651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147850</td>\n",
       "      <td>0.143738</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.154136  0.132225\n",
       "1  0.149961  0.140168\n",
       "2  0.148333  0.152676\n",
       "3  0.148935  0.150441\n",
       "4  0.149122  0.137651\n",
       "5  0.147850  0.143738"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[2])\n",
    "var = br_features\n",
    "cv_output2 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.156300</td>\n",
       "      <td>0.137833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.152551</td>\n",
       "      <td>0.142203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.150653</td>\n",
       "      <td>0.153494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.150961</td>\n",
       "      <td>0.149594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.150668</td>\n",
       "      <td>0.139290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.149361</td>\n",
       "      <td>0.143977</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.156300  0.137833\n",
       "1  0.152551  0.142203\n",
       "2  0.150653  0.153494\n",
       "3  0.150961  0.149594\n",
       "4  0.150668  0.139290\n",
       "5  0.149361  0.143977"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[3])\n",
    "var = mi_features\n",
    "cv_output3 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.153730</td>\n",
       "      <td>0.132628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.149673</td>\n",
       "      <td>0.141816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.148261</td>\n",
       "      <td>0.152656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.148824</td>\n",
       "      <td>0.151094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.149078</td>\n",
       "      <td>0.138508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147847</td>\n",
       "      <td>0.143552</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.153730  0.132628\n",
       "1  0.149673  0.141816\n",
       "2  0.148261  0.152656\n",
       "3  0.148824  0.151094\n",
       "4  0.149078  0.138508\n",
       "5  0.147847  0.143552"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[4])\n",
    "var = corr_features\n",
    "cv_output4 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.154154</td>\n",
       "      <td>0.132954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.150116</td>\n",
       "      <td>0.140332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.148487</td>\n",
       "      <td>0.152599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.149066</td>\n",
       "      <td>0.149935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.149162</td>\n",
       "      <td>0.138439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147999</td>\n",
       "      <td>0.144291</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.154154  0.132954\n",
       "1  0.150116  0.140332\n",
       "2  0.148487  0.152599\n",
       "3  0.149066  0.149935\n",
       "4  0.149162  0.138439\n",
       "5  0.147999  0.144291"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[5])\n",
    "var = sf_features\n",
    "cv_output5 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.154105</td>\n",
       "      <td>0.132944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.150069</td>\n",
       "      <td>0.140171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.148424</td>\n",
       "      <td>0.152387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.148971</td>\n",
       "      <td>0.149966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.149087</td>\n",
       "      <td>0.138287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147912</td>\n",
       "      <td>0.144425</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.154105  0.132944\n",
       "1  0.150069  0.140171\n",
       "2  0.148424  0.152387\n",
       "3  0.148971  0.149966\n",
       "4  0.149087  0.138287\n",
       "5  0.147912  0.144425"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[6])\n",
    "var = sf_features2\n",
    "cv_output6 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.154154</td>\n",
       "      <td>0.132954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.150116</td>\n",
       "      <td>0.140332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.148487</td>\n",
       "      <td>0.152599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.149066</td>\n",
       "      <td>0.149935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.149162</td>\n",
       "      <td>0.138439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147999</td>\n",
       "      <td>0.144291</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.154154  0.132954\n",
       "1  0.150116  0.140332\n",
       "2  0.148487  0.152599\n",
       "3  0.149066  0.149935\n",
       "4  0.149162  0.138439\n",
       "5  0.147999  0.144291"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[7])\n",
    "var = sf_features3\n",
    "cv_output7 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.155588</td>\n",
       "      <td>0.139493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.151965</td>\n",
       "      <td>0.142280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.150227</td>\n",
       "      <td>0.153208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.150307</td>\n",
       "      <td>0.149213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.150102</td>\n",
       "      <td>0.147137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.149012</td>\n",
       "      <td>0.142771</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.155588  0.139493\n",
       "1  0.151965  0.142280\n",
       "2  0.150227  0.153208\n",
       "3  0.150307  0.149213\n",
       "4  0.150102  0.147137\n",
       "5  0.149012  0.142771"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[8])\n",
    "var = mi_features_25\n",
    "cv_output8 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.155569</td>\n",
       "      <td>0.139439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.151879</td>\n",
       "      <td>0.142467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.150221</td>\n",
       "      <td>0.153195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.150275</td>\n",
       "      <td>0.149345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.150105</td>\n",
       "      <td>0.147123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.149029</td>\n",
       "      <td>0.142715</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.155569  0.139439\n",
       "1  0.151879  0.142467\n",
       "2  0.150221  0.153195\n",
       "3  0.150275  0.149345\n",
       "4  0.150105  0.147123\n",
       "5  0.149029  0.142715"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[9])\n",
    "var = mi_features_35\n",
    "cv_output9 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cv_train</th>\n",
       "      <th>cv_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.153066</td>\n",
       "      <td>0.135888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.149409</td>\n",
       "      <td>0.142588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.148008</td>\n",
       "      <td>0.152618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.148239</td>\n",
       "      <td>0.150777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.148411</td>\n",
       "      <td>0.147040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.147316</td>\n",
       "      <td>0.143611</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cv_train    cv_val\n",
       "0  0.153066  0.135888\n",
       "1  0.149409  0.142588\n",
       "2  0.148008  0.152618\n",
       "3  0.148239  0.150777\n",
       "4  0.148411  0.147040\n",
       "5  0.147316  0.143611"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[10])\n",
    "var = mi_features_50\n",
    "cv_output10 = proper_CV(df.loc[:, var], df.loc[:, \"etr\"], model, display_res=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_mean</th>\n",
       "      <th>test_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.149041</td>\n",
       "      <td>0.142915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.149041</td>\n",
       "      <td>0.142915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.149723</td>\n",
       "      <td>0.142816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.151749</td>\n",
       "      <td>0.144399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.149569</td>\n",
       "      <td>0.143376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.149831</td>\n",
       "      <td>0.143092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.149761</td>\n",
       "      <td>0.143030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.149831</td>\n",
       "      <td>0.143092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.151200</td>\n",
       "      <td>0.145684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.151180</td>\n",
       "      <td>0.145714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.149074</td>\n",
       "      <td>0.145420</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    train_mean  test_mean\n",
       "0     0.149041   0.142915\n",
       "1     0.149041   0.142915\n",
       "2     0.149723   0.142816\n",
       "3     0.151749   0.144399\n",
       "4     0.149569   0.143376\n",
       "5     0.149831   0.143092\n",
       "6     0.149761   0.143030\n",
       "7     0.149831   0.143092\n",
       "8     0.151200   0.145684\n",
       "9     0.151180   0.145714\n",
       "10    0.149074   0.145420"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(\n",
    "    [\n",
    "        cv_output0[2].mean().tolist(),\n",
    "        cv_output1[2].mean().tolist(),\n",
    "        cv_output2[2].mean().tolist(),\n",
    "        cv_output3[2].mean().tolist(),\n",
    "        cv_output4[2].mean().tolist(),\n",
    "        cv_output5[2].mean().tolist(),\n",
    "        cv_output6[2].mean().tolist(),\n",
    "        cv_output7[2].mean().tolist(),\n",
    "        cv_output8[2].mean().tolist(),\n",
    "        cv_output9[2].mean().tolist(),\n",
    "        cv_output10[2].mean().tolist(),\n",
    "    ],\n",
    "    columns=[\"train_mean\", \"test_mean\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_std</th>\n",
       "      <th>test_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.002173</td>\n",
       "      <td>0.007141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.002173</td>\n",
       "      <td>0.007141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.002278</td>\n",
       "      <td>0.007773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.002452</td>\n",
       "      <td>0.006065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.002135</td>\n",
       "      <td>0.007581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.002235</td>\n",
       "      <td>0.007358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.002247</td>\n",
       "      <td>0.007348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.002235</td>\n",
       "      <td>0.007358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.002348</td>\n",
       "      <td>0.005091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.002335</td>\n",
       "      <td>0.005100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.002069</td>\n",
       "      <td>0.006087</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    train_std  test_std\n",
       "0    0.002173  0.007141\n",
       "1    0.002173  0.007141\n",
       "2    0.002278  0.007773\n",
       "3    0.002452  0.006065\n",
       "4    0.002135  0.007581\n",
       "5    0.002235  0.007358\n",
       "6    0.002247  0.007348\n",
       "7    0.002235  0.007358\n",
       "8    0.002348  0.005091\n",
       "9    0.002335  0.005100\n",
       "10   0.002069  0.006087"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(\n",
    "    [\n",
    "        cv_output0[2].std().tolist(),\n",
    "        cv_output1[2].std().tolist(),\n",
    "        cv_output2[2].std().tolist(),\n",
    "        cv_output3[2].std().tolist(),\n",
    "        cv_output4[2].std().tolist(),\n",
    "        cv_output5[2].std().tolist(),\n",
    "        cv_output6[2].std().tolist(),\n",
    "        cv_output7[2].std().tolist(),\n",
    "        cv_output8[2].std().tolist(),\n",
    "        cv_output9[2].std().tolist(),\n",
    "        cv_output10[2].std().tolist(),\n",
    "    ],\n",
    "    columns=[\"train_std\", \"test_std\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['etr_y_past', 'etr_y_ma', 'txt', 'diff', 'pi', 'diff_ma', 'WB_GDPpc', 'txt_cat_(-63.011, -34.811]', 'dlc_cat_(176.129, 200.9]']\n"
     ]
    }
   ],
   "source": [
    "# 3rd model\n",
    "print(br_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ElasticNet(alpha=0.1)"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ElasticNet(**hp[2])\n",
    "model.fit(df.loc[:, br_features].values, df.loc[:, \"etr\"].values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \".../models/elasticnet.sav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(model, open(filename, \"wb\"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "vscode": {
   "interpreter": {
    "hash": "bff0f7c864331389fa2ce0c5d534e26d0bfdbc8f9c927a5938dc8a191fde6d96"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
